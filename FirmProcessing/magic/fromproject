#VxWorks

# Signatures to identify the start of a VxWorks symbol table
# The jump is necessary to ensure that we don't accidentally
# report a big endian symbol table followed immediately by a
# little endian symbol table. We only want to show the beginning
# of the symbol table, so use the once keyword too.
8       string      \x00\x00\x05                        _linux, VxWorks symbol table, big endian,{overlap}{once}{jump:156}
>11     string      !\x00\x00\x00\x00\x00               {invalid}
>4      belong      0                                   {invalid}
>4      ubelong     x                                   first entry: [type: function, code address: 0x%X,
>0      belong      0                                   {invalid}
>0      ubelong     x                                   symbol address: 0x%X]
>24     belong      !0x500
>>24    belong      !0x700
>>>24   belong      !0x900                              \b, {invalid}
>40     belong      !0x500
>>40    belong      !0x700
>>>40   belong      !0x900                              \b, {invalid}
>56     belong      !0x500
>>56    belong      !0x700
>>>56   belong      !0x900                              \b, {invalid}
>72     belong      !0x500
>>72    belong      !0x700
>>>72   belong      !0x900                              \b, {invalid}
>88     belong      !0x500
>>88    belong      !0x700
>>>88   belong      !0x900                              \b, {invalid}
>104    belong      !0x500
>>104   belong      !0x700
>>>104  belong      !0x900                              \b, {invalid}
>120    belong      !0x500
>>120   belong      !0x700
>>>120  belong      !0x900                              \b, {invalid}
>136    belong      !0x500
>>136   belong      !0x700
>>>136  belong      !0x900                              \b, {invalid}
>152    belong      !0x500
>>152   belong      !0x700
>>>152  belong      !0x900                              \b, {invalid}

8       string      \x00\x00\x07                        _linux, VxWorks symbol table, big endian,{once}{jump:156}
>11     string      !\x00\x00\x00\x00\x00               {invalid}
>4      belong      0                                   {invalid}
>4      ubelong     x                                   first entry: [type: initialized data, code address: 0x%X,
>0      belong      0                                   {invalid}
>0      ubelong     x                                   symbol address: 0x%X]
>24     belong      !0x500
>>24    belong      !0x700
>>>24   belong      !0x900                              \b, {invalid}
>40     belong      !0x500
>>40    belong      !0x700
>>>40   belong      !0x900                              \b, {invalid}
>56     belong      !0x500
>>56    belong      !0x700
>>>56   belong      !0x900                              \b, {invalid}
>72     belong      !0x500
>>72    belong      !0x700
>>>72   belong      !0x900                              \b, {invalid}
>88     belong      !0x500
>>88    belong      !0x700
>>>88   belong      !0x900                              \b, {invalid}
>104    belong      !0x500
>>104   belong      !0x700
>>>104  belong      !0x900                              \b, {invalid}
>120    belong      !0x500
>>120   belong      !0x700
>>>120  belong      !0x900                              \b, {invalid}
>136    belong      !0x500
>>136   belong      !0x700
>>>136  belong      !0x900                              \b, {invalid}
>152    belong      !0x500
>>152   belong      !0x700
>>>152  belong      !0x900                              \b, {invalid}

8       string      \x00\x00\x09                        _linux, VxWorks symbol table, big endian,{once}{jump:156}
>11     string      !\x00\x00\x00\x00\x00               {invalid}
>4      belong      0                                   {invalid}
>4      ubelong     x                                   first entry: [type: uninitialized data, code address: 0x%X,
>0      belong      0                                   {invalid}
>0      ubelong     x                                   symbol address: 0x%X]
>24     belong      !0x500
>>24    belong      !0x700
>>>24   belong      !0x900                              \b, {invalid}
>40     belong      !0x500
>>40    belong      !0x700
>>>40   belong      !0x900                              \b, {invalid}
>56     belong      !0x500
>>56    belong      !0x700
>>>56   belong      !0x900                              \b, {invalid}
>72     belong      !0x500
>>72    belong      !0x700
>>>72   belong      !0x900                              \b, {invalid}
>88     belong      !0x500
>>88    belong      !0x700
>>>88   belong      !0x900                              \b, {invalid}
>104    belong      !0x500
>>104   belong      !0x700
>>>104  belong      !0x900                              \b, {invalid}
>120    belong      !0x500
>>120   belong      !0x700
>>>120  belong      !0x900                              \b, {invalid}
>136    belong      !0x500
>>136   belong      !0x700
>>>136  belong      !0x900                              \b, {invalid}
>152    belong      !0x500
>>152   belong      !0x700
>>>152  belong      !0x900                              \b, {invalid}

8       string      \x00\x05                            _linux, VxWorks symbol table, little endian,{once}{jump:156}
>11     string      !\x00\x00\x00\x00\x00\x00           {invalid}
>4      lelong      0                                   {invalid}
>4      ulelong     x                                   first entry: [type: function, code address: 0x%X,
>0      lelong      0                                   {invalid}
>0      ulelong     x                                   symbol address: 0x%X]
>24     lelong      !0x500
>>24    lelong      !0x700
>>>24   lelong      !0x900                              \b, {invalid}
>40     lelong      !0x500
>>40    lelong      !0x700
>>>40   lelong      !0x900                              \b, {invalid}
>56     lelong      !0x500
>>56    lelong      !0x700
>>>56   lelong      !0x900                              \b, {invalid}
>72     lelong      !0x500
>>72    lelong      !0x700
>>>72   lelong      !0x900                              \b, {invalid}
>88     lelong      !0x500
>>88    lelong      !0x700
>>>88   lelong      !0x900                              \b, {invalid}
>104    lelong      !0x500
>>104   lelong      !0x700
>>>104  lelong      !0x900                              \b, {invalid}
>120    lelong      !0x500
>>120   lelong      !0x700
>>>120  lelong      !0x900                              \b, {invalid}
>136    lelong      !0x500
>>136   lelong      !0x700
>>>136  lelong      !0x900                              \b, {invalid}
>152    lelong      !0x500
>>152   lelong      !0x700
>>>152  lelong      !0x900                              \b, {invalid}

8       string      \x00\x07                            _linux, VxWorks symbol table, little endian,{once}{jump:156}
>11     string      !\x00\x00\x00\x00\x00\x00           {invalid}
>4      lelong      0                                   {invalid}
>4      ulelong     x                                   first entry: [type: initialized data, code address: 0x%X,
>0      lelong      0                                   {invalid}
>0      ulelong     x                                   symbol address: 0x%X]
>24     lelong      !0x500
>>24    lelong      !0x700
>>>24   lelong      !0x900                              \b, {invalid}
>40     lelong      !0x500
>>40    lelong      !0x700
>>>40   lelong      !0x900                              \b, {invalid}
>56     lelong      !0x500
>>56    lelong      !0x700
>>>56   lelong      !0x900                              \b, {invalid}
>72     lelong      !0x500
>>72    lelong      !0x700
>>>72   lelong      !0x900                              \b, {invalid}
>88     lelong      !0x500
>>88    lelong      !0x700
>>>88   lelong      !0x900                              \b, {invalid}
>104    lelong      !0x500
>>104   lelong      !0x700
>>>104  lelong      !0x900                              \b, {invalid}
>120    lelong      !0x500
>>120   lelong      !0x700
>>>120  lelong      !0x900                              \b, {invalid}
>136    lelong      !0x500
>>136   lelong      !0x700
>>>136  lelong      !0x900                              \b, {invalid}
>152    lelong      !0x500
>>152   lelong      !0x700
>>>152  lelong      !0x900                              \b, {invalid}

8       string      \x00\x09                            _linux, VxWorks symbol table, little endian,{once}{jump:156}
>11     string      !\x00\x00\x00\x00\x00\x00           {invalid}
>4      lelong      0                                   {invalid}
>4      ulelong     x                                   first entry: [type: uninitialized data, code address: 0x%X,
>0      lelong      0                                   {invalid}
>0      ulelong     x                                   symbol address: 0x%X]
>24     lelong      !0x500
>>24    lelong      !0x700
>>>24   lelong      !0x900                              \b, {invalid}
>40     lelong      !0x500
>>40    lelong      !0x700
>>>40   lelong      !0x900                              \b, {invalid}
>56     lelong      !0x500
>>56    lelong      !0x700
>>>56   lelong      !0x900                              \b, {invalid}
>72     lelong      !0x500
>>72    lelong      !0x700
>>>72   lelong      !0x900                              \b, {invalid}
>88     lelong      !0x500
>>88    lelong      !0x700
>>>88   lelong      !0x900                              \b, {invalid}
>104    lelong      !0x500
>>104   lelong      !0x700
>>>104  lelong      !0x900                              \b, {invalid}
>120    lelong      !0x500
>>120   lelong      !0x700
>>>120  lelong      !0x900                              \b, {invalid}
>136    lelong      !0x500
>>136   lelong      !0x700
>>>136  lelong      !0x900                              \b, {invalid}
>152    lelong      !0x500
>>152   lelong      !0x700
>>>152  lelong      !0x900                              \b, {invalid}

0       string      WIND\x20version\x20     _linux, VxWorks WIND kernel version
>13     byte        0                       {invalid}
>13     byte        !0
>>13    string      x                       "%s"

0       string      VxWorks\00              _linux, VxWorks operating system version
>8      byte        0                       {invalid}
>8      byte        !0
>>8     string      x                       "%s"
>16     string      !VxWorks                {invalid}
>32     byte        !0
>>32    string      x                       , compiled: "%s"


# binarch
# MIPS prologue
# addiu $sp, -XX
# sw XX, XX($sp)
# 27 BD FF XX
# AF BX XX XX
1	string		\xFF\xBD\x27	MIPSEL instructions, function prologue
>6	byte		!0xAF			{invalid}
>5	byte&0xE0	!0xA0			{invalid}

0	string		\x27\xBD\xFF	MIPS instructions, function prologue
>4	byte		!0xAF			{invalid}
>5	byte&0xE0	!0xA0			{invalid}

# MIPS epilogue
# jr $ra
# addiu $sp, XX
#
# addiu $sp, XX
# jr $ra
0	ubelong	0x03e00008	MIPS instructions, function epilogue
>4	ubeshort	!0x27BD		{invalid}
0	ubeshort	0x27BD		MIPS instructions, function epilogue
>2	ubelong	!0x03e00008	{invalid}

0	ulelong	0x03e00008	MIPSEL instructions, function epilogue
>6	uleshort	!0x27BD		{invalid}
0	uleshort	0x27BD		MIPS instructions, function epilogue
>2	ulelong	!0x03e00008	{invalid}

# MIPS16e
# nop (x4)
# TODO: Produces false positives when scanning ARM Thumb code
#0	string	\x65\x00\x65\x00\x65\x00\x65\x00	MIPS16e instructions, nops{jump-to-offset:8}
#0	string	\x00\x65\x00\x65\x00\x65\x00\x65	MIPSEL16e instructions, nops{jump-to-offset:8}

# save a0-a1, XX
# addiu XX, XX
0	string	\xf0\x08\x64	MIPS16e instructions, function prologue
>4	byte	!0x01			{invalid}

# move $sp, $s1
# restore XX, XX, XX
# jrc $ra
0	ubeshort	0x65B9			MIPS16e instructions, function epilogue
>3	byte	    !0x64			{invalid}
>4	ubeshort	!0xE8A0			{invalid}
0	uleshort	0x65B9			MIPSEL16e instructions, function epilogue
>3	byte	    !0x64			{invalid}
>4	uleshort	!0xE8A0			{invalid}

# jrc $ra
# nop
0	ubelong	0xe8a06500		MIPS16e instructions, function epilogue
0	ulelong	0xe8a06500		MIPSEL16e instructions, function epilogue

# PowerPC prologue
# mflr r0
0	ubelong 0x7C0802A6	PowerPC big endian instructions, function prologue
0	ulelong 0x7C0802A6	PowerPC little endian instructions, function prologue

# PowerPC epilogue
# blr
0	ubelong 0x4E800020	PowerPC big endian instructions, function epilogue
0	ulelong 0x4E800020	PowerPC little endian instructions, function epilogue

# TODO: Add ARM Thumb dectection
# ARM prologue
# STMFD SP!, {XX}
# <any instruction whose opcode begins with 0xE>
0	ubeshort	0xE92D	ARMEB instructions, function prologue
>4	byte&0xF0	!0xE0	{invalid}
>8	byte&0xF0	!0xE0	{invalid}
0	uleshort	0xE92D	ARM instructions, function prologue{adjust:-2}
>5	byte&0xF0	!0xE0	{invalid}
>9	byte&0xF0	!0xE0	{invalid}

# ARM epilogue
# MOV R0, XX
# LDMFD SP!, {XX}
0	ubeshort	0xE1A0	ARMEB instructions, function epilogue
>4	beshort		!0xE8BD	{invalid}
0	uleshort	0xE1A0	ARM instructions, function epilogue{adjust:-2}
>4	leshort		!0xE8BD	{invalid}


# Ubicom32 prologue
# move.4 -4($sp)++, $ra
0	ubelong	    0x02FF6125	Ubicom32 instructions, function prologue

# Ubicom32 epilogues
# calli $ra, 0($ra)
# ret ($sp)4++
0	ubelong	    0xF0A000A0	Ubicom32 instructions, function epilogue
0	ubelong	    0x000022E1	Ubicom32 instructions, function epilogue

# AVR8 prologue
# push r28
# push r29
0	ubelong	    0x93CF93DF	AVR8 instructions, function prologue
0	ubelong	    0x93DF93CF	AVR8 instructions, function prologue

# AVR32 prologue
# pushm   r7,lr
# mov r7,sp
0	string	\xEB\xCD\x40\x80\x1A\x97	AVR32 instructions, function prologue

# SPARC epilogue
# ret
# restore XX
0	string	\x81\xC7\xE0\x08\x81\xE8	SPARC instructions, function epilogue

# x86 epilogue
# push ebp
# move ebp, esp
# sub esp, XX
#
# push ebp
# move ebp, esp
# push edi
# push esi
0	string	\x55\x89\xE5\x83\xEC				Intel x86 instructions, function prologue
0	string	\x55\x89\xE5\x57\x56				Intel x86 instructions, function prologue
0	string	\x90\x90\x90\x90\x90\x90\x90\x90	Intel x86 instructions, nops{jump:8}{overlap}

# unlk a6
# rts
# link a6, XX
0   string  N^NuNV      Motorola Coldfire instructions, function prologue/epilogue

# mov.l   @r15+, r9
# rts
# mov.l   @r15
0   string  \xF6\x69\x0B\x00\xF6\x68            SuperH instructions, little endian, function epilogue (gcc)
0   string  \x69\xF6\x00\x0B\x68\xF6            SuperH instructions, big endian, function epilogue (gcc)

# AArch64
# ret
0 ulelong 0xd65f03c0 AArch64 instructions, function epilogue

# nop
0 ulelong 0xd503201f AArch64 instructions, nop


#---------------------------Bootloaders--------------------------------

# CFE bootloader
0	string	CFE1	    _linux, CFE boot loader
>4  string  !CFE1       {invalid}
>40	string	CFE1CFE1	{invalid}

# U-Boot boot loader
0	string	U-Boot\x20  _linux, U-Boot version string,
>7  byte    <48         {invalid}
>7  byte    >57         {invalid}
>8  byte    !0x2E       {invalid}
>0  string  x           "%s"


# console
# From Gurkan Sengun <gurkan@linuks.mine.nu>, www.linuks.mine.nu
12  string      GameBoy\x20Music\x20Module  Nintendo Gameboy Music Module

#------------------------------------------------------------------------------
# gameboy:  file(1) magic for the Nintendo (Color) Gameboy raw ROM format
#
0x104   ubelong     0xCEED6666      Gameboy ROM,
>0x134  byte        !0
>>0x134 string      x               name: "%.16s"
>0x146  byte        0x03            \b,[SGB]
>0x147  byte        0x00            \b, [ROM ONLY]
>0x147  byte        0x01            \b, [ROM+MBC1]
>0x147  byte        0x02            \b, [ROM+MBC1+RAM]
>0x147  byte        0x03            \b, [ROM+MBC1+RAM+BATT]
>0x147  byte        0x05            \b, [ROM+MBC2]
>0x147  byte        0x06            \b, [ROM+MBC2+BATTERY]
>0x147  byte        0x08            \b, [ROM+RAM]
>0x147  byte        0x09            \b, [ROM+RAM+BATTERY]
>0x147  byte        0x0B            \b, [ROM+MMM01]
>0x147  byte        0x0C            \b, [ROM+MMM01+SRAM]
>0x147  byte        0x0D            \b, [ROM+MMM01+SRAM+BATT]
>0x147  byte        0x0F            \b, [ROM+MBC3+TIMER+BATT]
>0x147  byte        0x10            \b, [ROM+MBC3+TIMER+RAM+BATT]
>0x147  byte        0x11            \b, [ROM+MBC3]
>0x147  byte        0x12            \b, [ROM+MBC3+RAM]
>0x147  byte        0x13            \b, [ROM+MBC3+RAM+BATT]
>0x147  byte        0x19            \b, [ROM+MBC5]
>0x147  byte        0x1A            \b, [ROM+MBC5+RAM]
>0x147  byte        0x1B            \b, [ROM+MBC5+RAM+BATT]
>0x147  byte        0x1C            \b, [ROM+MBC5+RUMBLE]
>0x147  byte        0x1D            \b, [ROM+MBC5+RUMBLE+SRAM]
>0x147  byte        0x1E            \b, [ROM+MBC5+RUMBLE+SRAM+BATT]
>0x147  byte        0x1F            \b, [Pocket Camera]
>0x147  byte        0xFD            \b, [Bandai TAMA5]
>0x147  byte        0xFE            \b, [Hudson HuC-3]
>0x147  byte        0xFF            \b, [Hudson HuC-1]

>0x148  byte        0               \b, ROM: 256Kbit
>0x148  byte        1               \b, ROM: 512Kbit
>0x148  byte        2               \b, ROM: 1Mbit
>0x148  byte        3               \b, ROM: 2Mbit
>0x148  byte        4               \b, ROM: 4Mbit
>0x148  byte        5               \b, ROM: 8Mbit
>0x148  byte        6               \b, ROM: 16Mbit
>0x148  byte        0x52            \b, ROM: 9Mbit
>0x148  byte        0x53            \b, ROM: 10Mbit
>0x148  byte        0x54            \b, ROM: 12Mbit

>0x149  byte        1               \b, RAM: 16Kbit
>0x149  byte        2               \b, RAM: 64Kbit
>0x149  byte        3               \b, RAM: 128Kbit
>0x149  byte        4               \b, RAM: 1Mbit

#>0x14e  long        x               \b, CRC: %x

#------------------------------------------------------------------------------
# genesis:  file(1) magic for the Sega MegaDrive/Genesis raw ROM format
#
0x100   string  SEGA    Sega MegaDrive/Genesis raw ROM dump,
>0x120  string  x       Name: "%.16s",
>0x110  byte    !0
>>0x110 string  x       "%.16s",
>0x1B0  string  RA      with SRAM

# From: "Nelson A. de Oliveira" <naoliv@gmail.com>
# Nintendo .nds
192 string  \044\377\256Qi\232          Nintendo DS Game ROM Image
# Nintendo .gba
0   string  \056\000\000\352$\377\256Qi Nintendo Game Boy Advance ROM Image

#------------------------------------------------------------------------------
# Sony Playstation executables (Adam Sjoegren <asjo@diku.dk>) :
0       string  PS-X\x20EXE     Sony Playstation executable
#  Area:
>113    string  x               (%s)

#------------------------------------------------------------------------------
## Microsoft Xbox executables .xbe (Esa Hyyti <ehyytia@cc.hut.fi>)
0                       string              XBEH            Microsoft Xbox executable (XBE),
## probabilistic checks whether signed or not
>0x0004                 ulelong             =0
>>10                    ulelong             =0
>>>16                   ulelong             =0              \b, not signed
>0x0004                 ulelong             >0
>>10                    ulelong             >0              \b, signed
>>>16                   ulelong             >0              \b, signed
## expect base address of 0x10000
>0x0104                 ulelong             !0x10000        {invalid}
>0x0104                 ulelong             =0x10000
>>(0x0118-0x0FF60)      ulelong&0x80000007  0x80000007      \b, all regions
>>(0x0118-0x0FF60)      ulelong&0x80000007  !0x80000007
>>>(0x0118-0x0FF60)     ulelong             >0              (regions:
>>>>(0x0118-0x0FF60)    ulelong             &0x00000001     NA
>>>>(0x0118-0x0FF60)    ulelong             &0x00000002     Japan
>>>>(0x0118-0x0FF60)    ulelong             &0x00000004     Rest_of_World
>>>>(0x0118-0x0FF60)    ulelong             &0x80000000     Manufacturer
>>>(0x0118-0x0FF60)     ulelong             >0              \b)

# --------------------------------
# # Microsoft Xbox data file formats
# # http://home.comcast.net/~admiral_powerslave/filestructure.html
0       string          XIP0                        XIP, Microsoft Xbox data,
>12     lelong          x                           total size: %d
>16     lelong          !0                          {invalid}
>24     lelong          !0                          {invalid}

0       string          XTF0\x00\x00\x00            XTF, Microsoft Xbox data


# Simple eCos string signatures
0        string    ecos                    eCos RTOS string reference:
>0       string    x                       "%s"
0        string    eCos                    eCos RTOS string reference:
>0       string    x                       "%s"
0        string    ECOS                    eCos RTOS string reference:
>0       string    x                       "%s"

# eCos kernel exception handlers
#
# mfc0    $k0, Cause       # Cause of last exception
# nop                      # Some versions of eCos omit the nop
# andi    $k0, 0x7F
# li      $k1, 0xXXXXXXXX
# add     $k1, $k0
# lw      $k1, 0($k1)
# jr      $k1
# nop
0       string      \x00\x68\x1A\x40\x00\x00\x00\x00\x7F\x00\x5A\x33    eCos kernel exception handler, architecture: MIPSEL,
>14     leshort     !0x3C1B                                             {invalid}
>18     leshort     !0x277B                                             {invalid}
>12     uleshort    x                                                   exception vector table base address: 0x%.4X
>16     uleshort    x                                                   \b%.4X

0       string      \x00\x68\x1A\x40\x7F\x00\x5A\x33                    eCos kernel exception handler, architecture: MIPSEL,
>10     leshort     !0x3C1B                                             {invalid}
>14     leshort     !0x277B                                             {invalid}
>8      uleshort    x                                                   exception vector table base address: 0x%.4X
>12     uleshort    x                                                   \b%.4X

0       string      \x40\x1A\x68\x00\x00\x00\x00\x00\x33\x5A\x00\x7F    eCos kernel exception handler, architecture: MIPS,
>12     beshort     !0x3C1B                                             {invalid}
>16     beshort     !0x277B                                             {invalid}
>14     ubeshort    x                                                   exception vector table base address: 0x%.4X
>18     ubeshort    x                                                   \b%.4X

0       string      \x40\x1A\x68\x00\x33\x5A\x00\x7F                    eCos kernel exception handler, architecture: MIPS,
>8      beshort     !0x3C1B                                             {invalid}
>12     beshort     !0x277B                                             {invalid}
>10     ubeshort    x                                                   exception vector table base address: 0x%.4X
>14     ubeshort    x                                                   \b%.4X



# http://blogs.phoenix.com/phoenix_technologies_bios/2007/02/uefi_pi_10_firm.html

40      string     _FVH              _linux, UEFI PI Firmware Volume
>32     ulequad    >0xFFFFFFFF       {invalid} unrealistic size
>32     ulequad    x                 \b, volume size: %d
>52     uleshort   x                 \b, header size: %d
>58     ubyte      !0                {invalid} reserved byte set
>59     ubyte      >1                {invalid} invalid revision
>59     ubyte      x                 \b, revision: %d

# GUID: 7A9354D9-0468-444A-81CE-0BF617D890D
>16     string     \xd9\x54\x93\x7a\x68\x04\x4a\x44\x81\xce\x0b\xf6\x17\xd8\x90\xdf  \b, EFI Firmware File System

# GUID: 8C8CE578-8A3D-4F1C-9935-896185C32DD3
>16     string     \x78\xe5\x8c\x8c\x3d\x8a\x1c\x4f\x99\x35\x89\x61\x85\xc3\x2d\xd3  \b, EFI Firmware File System v2

# GUID: 04ADEEAD-61FF-4D31-B6BA-64F8BF901F5A
>16     string     \xad\xee\xad\x04\xff\x61\x31\x4d\xb6\xba\x64\xf8\xbf\x90\x1f\x5a  \b, Apple Boot Volume

# GUID: 8C1B00BD-716A-7B48-A14F-0C2A2DCF7A5D
>16     string     \x8c\x1b\x00\xbd\x71\x6a\x7b\x48\xa1\x4f\x0c\x2a\x2d\xcf\x7a\x5d  \b, Apple Boot Volume v2

# GUID: AD3FFFFF-D28B-44C4-9F13-9EA98A97F9F0
>16     string     \xff\xff\x3f\xad\x8b\xd2\xc4\x44\x9f\x13\x9e\xa9\x8a\x97\xf9\xf0  \b, Intel v1

# GUID: D6A1CD70-4B33-4994-A6EA-375F2CCC5437
>16     string     \x70\xcd\xa1\xd6\x33\x4b\x94\x49\xa6\xea\x37\x5f\x2c\xcc\x54\x37  \b, Intel v2

# GUID: 4F494156-AED6-4D64-A537-B8A5557BCEEC
>16     string     \x56\x41\x49\x4f\xd6\xae\x64\x4d\xa5\x37\xb8\xa5\x55\x7b\xce\xec  \b, Sony v1

# GUID: FFF12B8D-7696-4C8B-85A9-2747075B4F50
>16     string     \x8d\x2b\xf1\xff\x96\x76\x8b\x4c\xa9\x85\x27\x47\x07\x5b\x4f\x50  \b, Variable Storage

>16     ulelong    x                 \b, GUID: %.8X-
>>20    uleshort   x                 \b%.4X-
>>22    uleshort   x                 \b%.4X-
>>24    uleshort   x                 \b%.4X-
>>26    ubyte      x                 \b%.2X
>>27    ubyte      x                 \b%.2X
>>28    ubyte      x                 \b%.2X
>>29    ubyte      x                 \b%.2X
>>30    ubyte      x                 \b%.2X
>>31    ubyte      x                 \b%.2X

# http://www.intel.com/content/www/us/en/architecture-and-technology/\
# unified-extensible-firmware-interface/efi-capsule-specification.html
# GUID: 3B6686BD-0D76-4030-B70E-B5519E2FC5A0
0       string     \xBD\x86\x66\x3B\x76\x0D\x30\x40\xB7\x0E\xB5\x51\x9E\x2F\xC5\xA0  _linux, EFI capsule v0.9
>16     lelong     <0                {invalid}
>16     lelong     x                 \b, header size: %d
>20     lelong     x                 \b, flags: 0x%.8X
>24     lelong     <0                {invalid}
>24     lelong     x                 \b, capsule size: %d

# Intel/UEFI format
# http://www.uefi.org/sites/default/files/resources/UEFI%202_5.pdf
# GUID: 539182B9-ABB5-4391-B69A-E3A943F72FCC
0       string     \xb9\x82\x91\x53\xb5\xab\x91\x43\xb6\x9a\xe3\xa9\x43\xf7\x2f\xcc  _linux, UEFI capsule
>16     lelong     <0                {invalid}
>16     lelong     x                 \b, header size: %d
>20     lelong     x                 \b, flags: 0x%.8X
>24     lelong     <0                {invalid}
>24     lelong     x                 \b, capsule size: %d

# GUID: 4A3CA68B-7723-48FB-803D-578CC1FEC44D
0       string     \x8b\xa6\x3c\x4a\x23\x77\xfb\x48\x80\x3d\x57\x8c\xc1\xfe\xc4\x4d  _linux, AMI Aptio extended EFI capsule
>16     lelong     <0                {invalid}
>16     lelong     x                 \b, header size: %d
>20     lelong     x                 \b, flags: 0x%.8X
>24     lelong     <0                {invalid}
>24     lelong     x                 \b, capsule size: %d

# GUID: 14EEBB90-890A-43DB-AED1-5D3C4588A418
0       string     \x90\xbb\xee\x14\x0a\x89\xdb\x43\xae\xd1\x5d\x3c\x45\x88\xa4\x18  _linux, AMI Aptio unsigned EFI capsule
>16     lelong     <0                {invalid}
>16     lelong     x                 \b, header size: %d
>20     lelong     x                 \b, flags: 0x%.8X
>24     lelong     <0                {invalid}
>24     lelong     x                 \b, capsule size: %d

# GUID: 3BE07062-1D51-45D2-2B83-F093257ED461
0       string     \x62\x70\xe0\x3b\x51\x1d\xd2\x45\x83\x2b\xf0\x93\x25\x7e\xd4\x61  _linux, Toshiba EFI capsule
>16     lelong     <0                {invalid}
>16     lelong     x                 \b, header size: %d
>20     lelong     x                 \b, flags: 0x%.8X
>24     lelong     <0                {invalid}
>24     lelong     x                 \b, capsule size: %d



#------------------Standard file formats------------------------------------

#------------------------------------------------------------------------------
# elf:  file(1) magic for ELF executables
#
# We have to check the byte order flag to see what byte order all the
# other stuff in the header is in.
#
# What're the correct byte orders for the nCUBE and the Fujitsu VPP500?
#
# updated by Daniel Quinlan (quinlan@yggdrasil.com)
0           string                  \177ELF         _ELF,
>4          byte                    0               {invalid}
>4          byte                    1               32-bit
# only for MIPS - in the future, the ABI field of e_flags should be used.
>>18        leshort                 8
>>>36       lelong                  &0x20           N32
>>18        leshort                 10
>>>36       lelong                  &0x20           N32
>>18        beshort                 8
>>>36       belong                  &0x20           N32
>>18        beshort                 10
>>>36       belong                  &0x20           N32
>4          byte                    2               64-bit
>4          byte                    >2
>>4         byte                    x               unknown ELF class: 0x%X
>5          byte                    !1
>>5         byte                    !2              {invalid}
>5          byte                    1               LSB
# The official e_machine number for MIPS is now #8, regardless of endianness.
# The second number (#10) will be deprecated later. For now, we still
# say something if #10 is encountered, but only gory details for #8.
>>18        leshort                 8
# only for 32-bit
>>>4        byte                    1
>>>>36      lelong&0xf0000000       0x00000000      MIPS-I
>>>>36      lelong&0xf0000000       0x10000000      MIPS-II
>>>>36      lelong&0xf0000000       0x20000000      MIPS-III
>>>>36      lelong&0xf0000000       0x30000000      MIPS-IV
>>>>36      lelong&0xf0000000       0x40000000      MIPS-V
>>>>36      lelong&0xf0000000       0x60000000      MIPS32
>>>>36      lelong&0xf0000000       0x70000000      MIPS64
>>>>36      ulelong&0xf0000000      0x80000000      MIPS32 rel2
>>>>36      ulelong&0xf0000000      0x90000000      MIPS64 rel2
# only for 64-bit
>>>4        byte                    2
>>>>48      lelong&0xf0000000       0x00000000      MIPS-I
>>>>48      lelong&0xf0000000       0x10000000      MIPS-II
>>>>48      lelong&0xf0000000       0x20000000      MIPS-III
>>>>48      lelong&0xf0000000       0x30000000      MIPS-IV
>>>>48      lelong&0xf0000000       0x40000000      MIPS-V
>>>>48      lelong&0xf0000000       0x60000000      MIPS32
>>>>48      lelong&0xf0000000       0x70000000      MIPS64
>>>>48      ulelong&0xf0000000      0x80000000      MIPS32 rel2
>>>>48      ulelong&0xf0000000      0x90000000      MIPS64 rel2
>>16        leshort                 0               no file type,
>>16        leshort                 1               relocatable,
>>16        leshort                 2               executable,
>>16        leshort                 3               shared object,
# Core handling from Peter Tobias <tobias@server.et-inf.fho-emden.de>
# corrections by Christian 'Dr. Disk' Hechelmann <drdisk@ds9.au.s.shuttle.de>
>>16        leshort                 4               core file
>>16        uleshort                &0xff00         processor-specific,
>>18        leshort                 0               no machine,
>>18        leshort                 1               AT&T WE32100 - wrong byte order,{invalid}
>>18        leshort                 2               SPARC - wrongbyte order,{invalid}
>>18        leshort                 3               Intel 80386,
>>18        leshort                 4               Motorola
>>>36       lelong                  &0x01000000     68000 - wrong byte order,{invalid}
>>>36       lelong                  &0x00810000     CPU32 - wrong byte order,{invalid}
>>>36       lelong                  0               68020 - wrong byte order,{invalid}
>>18        leshort                 5               Motorola 88000 - wrong byte order,{invalid}
>>18        leshort                 6               Intel 80486,
>>18        leshort                 7               Intel 80860,
>>18        leshort                 8               MIPS,
>>18        leshort                 9               Amdahl - wrong byte order,{invalid}
>>18        leshort                 10              MIPS (deprecated),
>>18        leshort                 11              RS6000 - wrong byte order,{invalid}
>>18        leshort                 15              PA-RISC - wrong byte order,{invalid}
>>>50       leshort                 0x0214          2.0
>>>48       leshort                 &0x0008         (LP64),
>>18        leshort                 16              nCUBE,
>>18        leshort                 17              Fujitsu VPP500,
>>18        leshort                 18              SPARC32PLUS,
>>18        leshort                 20              PowerPC,
>>18        leshort                 22              IBM S/390,
>>18        leshort                 36              NEC V800,
>>18        leshort                 37              Fujitsu FR20,
>>18        leshort                 38              TRW RH-32,
>>18        leshort                 39              Motorola RCE,
>>18        leshort                 40              ARM,
>>18        leshort                 41              Alpha,
>>18        uleshort                0xa390          IBM S/390 (obsolete),
>>18        leshort                 42              Hitachi SH,
>>18        leshort                 43              SPARC V9 - wrong byte order,{invalid}
>>18        leshort                 44              Siemens Tricore Embedded Processor,
>>18        leshort                 45              Argonaut RISC Core, Argonaut Technologies Inc.,
>>18        leshort                 46              Hitachi H8/300,
>>18        leshort                 47              Hitachi H8/300H,
>>18        leshort                 48              Hitachi H8S,
>>18        leshort                 49              Hitachi H8/500,
>>18        leshort                 50              IA-64 (Intel 64 bit architecture)
>>18        leshort                 51              Stanford MIPS-X,
>>18        leshort                 52              Motorola Coldfire,
>>18        leshort                 53              Motorola M68HC12,
>>18        leshort                 62              AMD x86-64,
>>18        leshort                 75              Digital VAX,
>>18        leshort                 97              NatSemi 32k,
>>18        uleshort                0x9026          Alpha (unofficial),
>>20        lelong                  0               {invalid} invalid version
>>20        lelong                  1               version 1
>>36        lelong                  1               MathCoPro/FPU/MAU Required
>5          byte                    2               MSB
# only for MIPS - see comment in little-endian section above.
>>18        beshort                 8
# only for 32-bit
>>>4        byte                    1
>>>>36      belong&0xf0000000       0x00000000      MIPS-I
>>>>36      belong&0xf0000000       0x10000000      MIPS-II
>>>>36      belong&0xf0000000       0x20000000      MIPS-III
>>>>36      belong&0xf0000000       0x30000000      MIPS-IV
>>>>36      belong&0xf0000000       0x40000000      MIPS-V
>>>>36      belong&0xf0000000       0x60000000      MIPS32
>>>>36      belong&0xf0000000       0x70000000      MIPS64
>>>>36      ubelong&0xf0000000      0x80000000      MIPS32 rel2
>>>>36      ubelong&0xf0000000      0x90000000      MIPS64 rel2
# only for 64-bit
>>>4        byte                    2
>>>>48      belong&0xf0000000       0x00000000      MIPS-I
>>>>48      belong&0xf0000000       0x10000000      MIPS-II
>>>>48      belong&0xf0000000       0x20000000      MIPS-III
>>>>48      belong&0xf0000000       0x30000000      MIPS-IV
>>>>48      belong&0xf0000000       0x40000000      MIPS-V
>>>>48      belong&0xf0000000       0x60000000      MIPS32
>>>>48      belong&0xf0000000       0x70000000      MIPS64
>>>>48      ubelong&0xf0000000      0x80000000      MIPS32 rel2
>>>>48      ubelong&0xf0000000      0x90000000      MIPS64 rel2
>>16        beshort                 0               no file type,
>>16        beshort                 1               relocatable,
>>16        beshort                 2               executable,
>>16        beshort                 3               shared object,
>>16        beshort                 4               core file,
#>>>(0x38+0xcc) string    >\0        of '%s'
#>>>(0x38+0x10) belong    >0        (signal %d),
>>16        ubeshort                &0xff00         processor-specific,
>>18        beshort                 0               no machine,
>>18        beshort                 1               AT&T WE32100,
>>18        beshort                 2               SPARC,
>>18        beshort                 3               Intel 80386 - wrong byte order,{invalid}
>>18        beshort                 4               Motorola
>>>36       belong                  &0x01000000     68000,
>>>36       belong                  &0x00810000     CPU32,
>>>36       belong                  0               68020,
>>18        beshort                 5               Motorola 88000,
>>18        beshort                 6               Intel 80486 - wrong byte order,{invalid}
>>18        beshort                 7               Intel 80860 - wrong byte order,{invalid}
>>18        beshort                 8               MIPS,
>>18        beshort                 9               Amdahl,
>>18        beshort                 10              MIPS (deprecated),
>>18        beshort                 11              RS6000,
>>18        beshort                 15              PA-RISC
>>>50       beshort                 0x0214          2.0
>>>48       beshort                 &0x0008         (LP64)
>>18        beshort                 16              nCUBE,
>>18        beshort                 17              Fujitsu VPP500,
>>18        beshort                 18              SPARC32PLUS,
>>>36       belong&0xffff00         &0x000100       V8+ Required,
>>>36       belong&0xffff00         &0x000200       Sun UltraSPARC1 Extensions Required,
>>>36       belong&0xffff00         &0x000400       HaL R1 Extensions Required,
>>>36       belong&0xffff00         &0x000800       Sun UltraSPARC3 Extensions Required,
>>18        beshort                 20              PowerPC or cisco 4500,
>>18        beshort                 21              cisco 7500,
>>18        beshort                 22              IBM S/390,
>>18        beshort                 24              cisco SVIP,
>>18        beshort                 25              cisco 7200,
>>18        beshort                 36              NEC V800 or cisco 12000,
>>18        beshort                 37              Fujitsu FR20,
>>18        beshort                 38              TRW RH-32,
>>18        beshort                 39              Motorola RCE,
>>18        beshort                 40              ARM,
>>18        beshort                 41              Alpha,
>>18        beshort                 42              Hitachi SH,
>>18        beshort                 43              SPARC V9,
>>18        beshort                 44              Siemens Tricore Embedded Processor,
>>18        beshort                 45              Argonaut RISC Core, Argonaut Technologies Inc.,
>>18        beshort                 46              Hitachi H8/300,
>>18        beshort                 47              Hitachi H8/300H,
>>18        beshort                 48              Hitachi H8S,
>>18        beshort                 49              Hitachi H8/500,
>>18        beshort                 50              Intel Merced Processor,
>>18        beshort                 51              Stanford MIPS-X,
>>18        beshort                 52              Motorola Coldfire,
>>18        beshort                 53              Motorola M68HC12,
>>18        beshort                 73              Cray NV1,
>>18        beshort                 75              Digital VAX,
>>18        beshort                 97              NatSemi 32k,
>>18        ubeshort                0x9026          Alpha (unofficial),
>>18        ubeshort                0xa390          IBM S/390 (obsolete),
>>18        ubeshort                0xde3d          Ubicom32,
>>20        belong                  0               {invalid}invalid version
>>20        belong                  1               version 1
>>36        belong                  1               MathCoPro/FPU/MAU Required
# Up to now only 0, 1 and 2 are defined; I've seen a file with 0x83, it seemed
# like proper ELF, but extracting the string had bad results.
>4          byte                    <0x80
>>8         byte                    !0
>>>8        string                  x               ("%s")
>8          byte                    0
>>7         byte                    0               (SYSV)
>>7         byte                    1               (HP-UX)
>>7         byte                    2               (NetBSD)
>>7         byte                    3               (GNU/Linux)
>>7         byte                    4               (GNU/Hurd)
>>7         byte                    5               (86Open)
>>7         byte                    6               (Solaris)
>>7         byte                    7               (Monterey)
>>7         byte                    8               (IRIX)
>>7         byte                    9               (FreeBSD)
>>7         byte                    10              (Tru64)
>>7         byte                    11              (Novell Modesto)
>>7         byte                    12              (OpenBSD)
>>7         byte                    97              (ARM)
>>7         ubyte                   255             (embedded)

# Some simple Microsoft executable signatures
0           string      MZ\0\0\0\0\0\0      Microsoft executable,
>0x3c       lelong      <4                  {invalid}
>(0x3c.l)   string      !PE\0\0             MS-DOS
>(0x3c.l)   string      PE\0\0              portable (PE)

0           string      MZ                  Microsoft executable,
>0x3c       lelong      <4                  {invalid}
>(0x3c.l)   string      !PE\0\0             {invalid}
>(0x3c.l)   string      PE\0\0              portable (PE)


#------------------------------------------------------------------------------
# bFLT: file(1) magic for BFLT uclinux binary files
#
# From Philippe De Muyter <phdm@macqel.be>
#
# Additional fields added by Craig Heffner
#
0       string      bFLT    _linux, BFLT executable
>4      belong      <1      {invalid}
>4      belong      >4      {invalid}
>4      belong      x       version %d,
>8      ubelong     x       code offset: 0x%.8X,
>12     ubelong     x       data segment starts at: 0x%.8X,
>16     ubelong     x       bss segment starts at: 0x%.8X,
>20     ubelong     x       bss segment ends at: 0x%.8X,
>24     ubelong     x       stack size: %d bytes,
>28     ubelong     x       relocation records start at: 0x%.8X,
>32     ubelong     x       number of reolcation records: %d,
>>36    belong&0x1  0x1     ram
>>36    belong&0x2  0x2     gotpic
>>36    belong&0x4  0x4     gzip
>>36    belong&0x8  0x8     gzdata


# Windows CE package files
0       string          MSCE\0\0\0\0    Microsoft WinCE installer
>20     lelong          0               \b, architecture-independent
>20     lelong          103             \b, Hitachi SH3
>20     lelong          104             \b, Hitachi SH4
>20     lelong          0xA11           \b, StrongARM
>20     lelong          4000            \b, MIPS R4000
>20     lelong          10003           \b, Hitachi SH3
>20     lelong          10004           \b, Hitachi SH3E
>20     lelong          10005           \b, Hitachi SH4
>20     lelong          70001           \b, ARM 7TDMI
>52     leshort         1               \b, 1 file
>52     uleshort        >1              \b, %u files
>56     leshort         1               \b, 1 registry entry
>56     uleshort        >1              \b, %u registry entries

#------------------------------------------------------------------------------
# motorola:  file(1) magic for Motorola 68K and 88K binaries
#
# 68K
#
# These signatures are useless without further sanity checking. Disable them until
# that can be implemented.
#0       beshort         0x0208          mc68k COFF
#>18     beshort         ^00000020       object
#>18     beshort         &00000020       executable
#>12     belong          >0              not stripped
#>168    string          .lowmem         Apple toolbox
#>20     beshort         0407            (impure)
#>20     beshort         0410            (pure)
#>20     beshort         0413            (demand paged)
#>20     beshort         0421            (standalone)
#0       beshort         0x0209          mc68k executable (shared)
#>12     belong          >0              not stripped
#0       beshort         0x020A          mc68k executable (shared demand paged)
#>12     belong          >0              not stripped


#------------------------------------------------------------------------------
# Sony Playstation executables (Adam Sjoegren <asjo@diku.dk>) :
0       string  PS-X\x20EXE     Sony Playstation executable,
#  Area:
>113    string  x               "%s"

#------------------------------------------------------------------------------
# cisco:  file(1) magic for cisco Systems routers
#
# Most cisco file-formats are covered by the generic elf code
0   string      \x85\x01\x14    Cisco IOS microcode,
>7  byte        0               {invalid}
>7  string      x               for "%s"

0   string      \x85\x01\xcb    Cisco IOS experimental microcode,
>7  byte        0               {invalid}
>7  string      x               for "%s"

# EST flat binary format (which isn't, but anyway)
# From: Mark Brown <broonie@sirena.org.uk>
0    string    ESTFBINR    _linux, EST flat binary

# These are not the binaries themselves, but string references to them
# are a strong indication that they exist elsewhere...
#0    string    /bin/busybox    Busybox string reference: "%s"{one-of-many}
#0    string /bin/sh        Shell string reference: "%s"{one-of-many}

# Mach-O's
0    string \xca\xfe\xba\xbe\x00\x00\x00\x01    Mach-O universal binary with 1 architecture
0    string \xca\xfe\xba\xbe\x00\x00\x00\x02    Mach-O universal binary with 2 architectures
0    string \xca\xfe\xba\xbe\x00\x00\x00\x03    Mach-O universal binary with 3 architectures
0    string \xca\xfe\xba\xbe\x00\x00\x00\x04    Mach-O universal binary with 4 architectures
0    string \xca\xfe\xba\xbe\x00\x00\x00\x05    Mach-O universal binary with 5 architectures
0    string \xca\xfe\xba\xbe\x00\x00\x00\x06    Mach-O universal binary with 6 architectures
0    string \xca\xfe\xba\xbe\x00\x00\x00\x07    Mach-O universal binary with 7 architectures
0    string \xca\xfe\xba\xbe\x00\x00\x00\x08    Mach-O universal binary with 8 architectures
0    string \xca\xfe\xba\xbe\x00\x00\x00\x0a    Mach-O universal binary with 9 architectures
0    string \xca\xfe\xba\xbe\x00\x00\x00\x0b    Mach-O universal binary with 10 architectures
0    string \xca\xfe\xba\xbe\x00\x00\x00\x0c    Mach-O universal binary with 11 architectures
0    string \xca\xfe\xba\xbe\x00\x00\x00\x0d    Mach-O universal binary with 12 architectures
0    string \xca\xfe\xba\xbe\x00\x00\x00\x0e    Mach-O universal binary with 13 architectures
0    string \xca\xfe\xba\xbe\x00\x00\x00\x0f    Mach-O universal binary with 14 architectures
0    string \xca\xfe\xba\xbe\x00\x00\x00\x10    Mach-O universal binary with 15 architectures
0    string \xca\xfe\xba\xbe\x00\x00\x00\x11    Mach-O universal binary with 16 architectures
0    string \xca\xfe\xba\xbe\x00\x00\x00\x12    Mach-O universal binary with 17 architectures
0    string \xca\xfe\xba\xbe\x00\x00\x00\x13    Mach-O universal binary with 18 architectures

## The magic bytes for Java .class files is 0xcafebabe, but AFAIK all major version numbers are less than 255
## and all minor version numbers are 0. This gives us three more bytes we can signature on.
#0       string          \xca\xfe\xba\xbe\x00\x00\x00    Compiled Java class data,
#>6      beshort         x                               version %d.
#>4      beshort         x                               \b%d
## Which is which?
#>4      belong          0x032d                          (Java 1.0/1.1)
##>4     belong          0x032d                          (Java 1.1)
#>4      belong          0x002e                          (Java 1.2)
#>4      belong          0x002f                          (Java 1.3)
#>4      belong          0x0030                          (Java 1.4)
#>4      belong          0x0031                          (Java 1.5)
#>4      belong          0x0032                          (Java 1.6)
#>4      belong          >0x0050                         {invalid}

# Summary: HP-38/39 calculator
0       string          HP38Bin         HP 38 binary
>7      string          A               (Directory List)
>7      string          B               (Zaplet)
>7      string          C               (Note)
>7      string          D               (Program)
>7      string          E               (Variable)
>7      string          F               (List)
>7      string          G               (Matrix)
>7      string          H               (Library)
>7      string          I               (Target List)
>7      string          J               (ASCII Vector specification)
>7      string          K               (wildcard)
>7      byte            <0x41           {invalid}
>7      byte            >0x4B           {invalid}

0       string          HP39Bin         HP 39 binary
>7      string          A               (Directory List)
>7      string          B               (Zaplet)
>7      string          C               (Note)
>7      string          D               (Program)
>7      string          E               (Variable)
>7      string          F               (List)
>7      string          G               (Matrix)
>7      string          H               (Library)
>7      string          I               (Target List)
>7      string          J               (ASCII Vector specification)
>7      string          K               (wildcard)
>7      byte            <0x41           {invalid}
>7      byte            >0x4B           {invalid}

0       string          HP38Asc         HP 38 ASCII
>7      string          A               (Directory List)
>7      string          B               (Zaplet)
>7      string          C               (Note)
>7      string          D               (Program)
>7      string          E               (Variable)
>7      string          F               (List)
>7      string          G               (Matrix)
>7      string          H               (Library)
>7      string          I               (Target List)
>7      string          J               (ASCII Vector specification)
>7      string          K               (wildcard)
>7      byte            <0x41           {invalid}
>7      byte            >0x4B           {invalid}

0       string          HP39Asc         HP 39 ASCII
>7      string          A               (Directory List)
>7      string          B               (Zaplet)
>7      string          C               (Note)
>7      string          D               (Program)
>7      string          E               (Variable)
>7      string          F               (List)
>7      string          G               (Matrix)
>7      string          H               (Library)
>7      string          I               (Target List)
>7      string          J               (ASCII Vector specification)
>7      string          K               (wildcard)
>7      byte            <0x41           {invalid}
>7      byte            >0x4B           {invalid}

# Summary: HP-48/49 calculator
0       string          HPHP48          HP 48 binary
>8      leshort         0x2911          (ADR)
>8      leshort         0x2933          (REAL)
>8      leshort         0x2955          (LREAL)
>8      leshort         0x2977          (COMPLX)
>8      leshort         0x299d          (LCOMPLX)
>8      leshort         0x29bf          (CHAR)
>8      leshort         0x29e8          (ARRAY)
>8      leshort         0x2a0a          (LNKARRAY)
>8      leshort         0x2a2c          (STRING)
>8      leshort         0x2a4e          (HXS)
>8      leshort         0x2a74          (LIST)
>8      leshort         0x2a96          (DIR)
>8      leshort         0x2ab8          (ALG)
>8      leshort         0x2ada          (UNIT)
>8      leshort         0x2afc          (TAGGED)
>8      leshort         0x2b1e          (GROB)
>8      leshort         0x2b40          (LIB)
>8      leshort         0x2b62          (BACKUP)
>8      leshort         0x2b88          (LIBDATA)
>8      leshort         0x2d9d          (PROG)
>8      leshort         0x2dcc          (CODE)
>8      leshort         0x2e48          (GNAME)
>8      leshort         0x2e6d          (LNAME)
>8      leshort         0x2e92          (XLIB)
>8      leshort        <0x2911          {invalid}
>8      leshort        >0x2e92          {invalid}

0       string          HPHP49          HP 49 binary
>8      leshort         0x2911          (ADR)
>8      leshort         0x2933          (REAL)
>8      leshort         0x2955          (LREAL)
>8      leshort         0x2977          (COMPLX)
>8      leshort         0x299d          (LCOMPLX)
>8      leshort         0x29bf          (CHAR)
>8      leshort         0x29e8          (ARRAY)
>8      leshort         0x2a0a          (LNKARRAY)
>8      leshort         0x2a2c          (STRING)
>8      leshort         0x2a4e          (HXS)
>8      leshort         0x2a74          (LIST)
>8      leshort         0x2a96          (DIR)
>8      leshort         0x2ab8          (ALG)
>8      leshort         0x2ada          (UNIT)
>8      leshort         0x2afc          (TAGGED)
>8      leshort         0x2b1e          (GROB)
>8      leshort         0x2b40          (LIB)
>8      leshort         0x2b62          (BACKUP)
>8      leshort         0x2b88          (LIBDATA)
>8      leshort         0x2d9d          (PROG)
>8      leshort         0x2dcc          (CODE)
>8      leshort         0x2e48          (GNAME)
>8      leshort         0x2e6d          (LNAME)
>8      leshort         0x2e92          (XLIB)
>8      leshort         <0x2911         {invalid}
>8      leshort         >0x2e92         {invalid}

0       string          \x23\x21/       Executable script,
>6      byte            !0x2F
>>7     byte            !0x2F           {invalid}
>2      string          x               shebang: "%s"

0       string          \x23\x21\x20/   Executable script,
>7      byte            !0x2F
>>8     byte            !0x2F           {invalid}
>3      string          x               shebang: "%s"



#--------------------File Systems---------------------

# Minix filesystems
0x410   string      \x7f\x13\x00\x00\x00\x00    Minix filesystem, V1, little endian,
>0x402  beshort     x                           %d zones
>0x402  beshort     <1                          \b, invalid zone count {invalid}
>0x1e   string      minix                       \b, bootable
>0x1e   string      !minix
>>0x1e  string      !\x00\x00\x00\x00\x00       {invalid}

0x410   string      \x13\x7f\x00\x00\x00\x00    Minix filesystem, V1, big endian,
>0x402  beshort     x                           %d zones
>0x402  beshort     <1                          \b, invalid zone count {invalid}
>0x1e   string      minix                       \b, bootable
>0x1e   string      !minix
>>0x1e  string      !\x00\x00\x00\x00\x00       {invalid}

0x410   string      \x8f\x13\x00\x00\x00\x00    Minix filesystem, V1, little endian, 30 char names,
>0x402  beshort     x                           %d zones
>0x402  beshort     <1                          \b, invalid zone count {invalid}
>0x1e   string      minix                       \b, bootable
>0x1e   string      !minix
>>0x1e  string      !\x00\x00\x00\x00\x00       {invalid}

0x410   string      \x13\x8f\x00\x00\x00\x00    Minix filesystem, V1, big endian, 30 char names,
>0x402  beshort     x                           %d zones
>0x402  beshort     <1                          \b, invalid zone count {invalid}
>0x1e   string      minix                       \b, bootable
>0x1e   string      !minix
>>0x1e  string      !\x00\x00\x00\x00\x00       {invalid}

#0x410   leshort     0x2468      Minix filesystem, V2, little endian,
#>0x402  beshort     x           %d zones
#>0x1e   string      minix       \b, bootable

#0x410   beshort     0x2468      Minix filesystem, V2, big endian,
#>0x402  beshort     x           %d zones
#>0x1e   string      minix       \b, bootable

# YAFFS
0    string     \x03\x00\x00\x00\x01\x00\x00\x00\xFF\xFF\x00\x00    YAFFS filesystem, little endian
# The big endian signature has to be done a bit differently to prevent it from being self-overlapping
4    string     \x00\x00\x00\x01\xFF\xFF                            YAFFS filesystem, big endian
>0   string     !\x00\x00\x00\x03                                   {invalid}(first object is not a directory)
>10  string     !\x00                                               {invalid}(unexpected name in the first object entry)

# EFS2 file system - jojo@utulsa.edu
0      lelong       0x53000000       EFS2 Qualcomm filesystem super block, little endian,
>8     string       !EFSSuper        {invalid},
>4     leshort&0x01 1                NAND
>4     leshort&0x01 0                NOR
>4     leshort      x                version 0x%x,
>24    lelong       x                %d blocks,
>16    lelong       x                0x%x pages per block,
>20    lelong       x                0x%x bytes per page

0      belong       0x53000000       EFS2 Qualcomm filesystem super block, big endian,
>8     string       !SSFErepu        {invalid},
>4     beshort&0x01 1                NAND
>4     beshort&0x01 0                NOR
>4     beshort      x                version 0x%x,
>24    belong       x                %d blocks,
>16    belong       x                0x%x pages per block,
>20    belong       x                0x%x bytes per page

# TROC file system
0       string      TROC    TROC filesystem,
>4      lelong      x       %d file entries
>4      lelong      <1      {invalid}

# PFS file system
0       string    PFS/      PFS filesystem,
>5      byte      !0x2E     {invalid}
>4      string    x         version %s,
>14     leshort   x         %d files

# MPFS file system
0       string      MPFS     MPFS filesystem, Microchip,
>4      byte        <0       {invalid}
>4      byte        >10      {invalid}
>5      byte        <0       {invalid}
>4      byte        0
>>5     byte        0        {invalid}
>4      byte        x        version %d.
>5      byte        x        \b%d,
>6      leshort     <0       {invalid}
>6      leshort     x        %d file entries

# cramfs filesystem - russell@coker.com.au
0       lelong      0x28cd3d45      CramFS filesystem, little endian,
>4      lelong      <1              invalid size,{invalid}
>4      lelong      >1073741824     invalid size,{invalid}
>4      ulelong     x               size: %u,
>8      lelong      &1              version 2,
>8      lelong      &2              sorted_dirs,
>8      lelong      &4              hole_support,
>32     ulelong     0               invalid{invalid}
>32     ulelong     x               CRC 0x%.8X,
>36     ulelong     x               edition %u,
>40     lelong      <1              invalid blocks,{invalid}
>40     ulelong     x               %u blocks,
>44     lelong      <1              invalid file count,{invalid}
>44     lelong      >1000000        invalid file count,{invalid}
>44     ulelong     x               %u files
>4      ulelong     x               {jump:%u}
>4      ulelong     x               {size:%u}

0       belong      0x28cd3d45      CramFS filesystem, big endian,
>4      belong      <1              {invalid}
>4      belong      >1073741824     {invalid}
>4      belong      x               size %u,
>8      belong      &1              version 2,
>8      belong      &2              sorted_dirs,
>8      belong      &4              hole_support,
>32     ubelong     0               invalid{invalid}
>32     ubelong     x               CRC 0x%.8X,
>36     belong      x               edition %u,
>40     belong      <1              invalid blocks,{invalid}
>40     ubelong     x               %u blocks,
>44     belong      <1              invalid file count,{invalid}
>44     belong      >1000000        invalid file count,{invalid}
>44     ubelong     x               %u files
>4      ubelong     x               {jump:%u}
>4      ubelong     x               {size:%u}

# http://www.dubeiko.com/development/FileSystems/UBI/ubidesign.pdf
0       string      UBI!            UBI volume ID header,
>4      ubyte       x               version: %d,
>5      ubyte       x               type: %d,
>8      ubelong     x               volume id: %d,
>8      ubelong     >256            {invalid}
>12     ubelong     x               size: %d
>12     ubelong     !0              {invalid}
>28     string      !\x00*12        {invalid}

# http://lxr.free-electrons.com/source/fs/ubifs/ubifs-media.h
0       string      UBI\x23         UBI erase count header,
>4      ubyte       x               version: %d,
>5      string      !\x00*3         {invalid}
>8      ubequad     x               EC: 0x%lX,
>16     ubelong     x               VID header offset: 0x%X,
>20     ubelong     x               data offset: 0x%X
# dummy jump - actual jump value is determined in UBIValidPlugin
>20       ubyte       x               {jump:0}

# http://lxr.free-electrons.com/source/fs/ubifs/ubifs-media.h
0        lelong      0x06101831     UBIFS filesystem
>20      ubyte       <6             {invalid}
>20      ubyte       >7             {invalid} # Only look for superblock and master nodes
>22      leshort     !0             {invalid} # 2 bytes of padding should be filled with NULLs
>20      ubyte       6              superblock node,
>20      ubyte       7              master node,
>4       ulelong     x              CRC: 0x%X,
# Master node
>20      ubyte       7
>>24     lequad      x              highest inode: %d,
>>32     lequad      x              commit number: %d
# Superblock node
>20      ubyte       6
>>24     leshort     !0             {invalid}
>>28     ulelong      x             flags: 0x%X,
>>32     lelong      x              min I/O unit size: %d,
>>36     lelong      x              erase block size: %d,
>>40     lelong      x              erase block count: %d,
>>44     lelong      x              max erase blocks: %d,
>>80     lelong      x              format version: %d,
>>84     uleshort    >2             {invalid}
>>84     uleshort    x              compression type:
>>84     uleshort    0              none
>>84     uleshort    1              lzo
>>84     uleshort    2              zlib
>>86     leshort     !0             invalid padding,{invalid}

# JFFS2 file system
# If used with binwalk's smart signature feature (on by default, -S to disable)
# this signature can potentially lead to missing some JFFS2 file systems if there
# are multiple JFFS2 file systems in a target file and there are no other identified
# files in between the JFFS2 file systems. This is an unlikely scenario however, and
# the below signatures are much improved in terms of readability and accuracy in the
# vast majority of real world scenarios.
0                   uleshort    0x1985      JFFS2 filesystem, little endian
>2                  uleshort    !0xE001
>>2                 uleshort    !0xE002
>>>2                uleshort    !0x2003
>>>>2               uleshort    !0x2004
>>>>>2              uleshort    !0x2006
>>>>>>2             uleshort    !0xE008
>>>>>>>2            uleshort    !0xE009     {invalid}
>4                  lelong      0           {invalid}
>4                  lelong      <0          {invalid}
>4                  lelong      x           {many}{jump:%d}

0                   ubeshort    0x1985      JFFS2 filesystem, big endian
>2                  ubeshort    !0xE001
>>2                 ubeshort    !0xE002
>>>2                ubeshort    !0x2003
>>>>2               ubeshort    !0x2004
>>>>>2              ubeshort    !0x2006
>>>>>>2             ubeshort    !0xE008
>>>>>>>2            ubeshort    !0xE009     {invalid}
>4                  belong      0           {invalid}
>4                  belong      <0          {invalid}
>4                  belong      x           {many}{jump:%d}


# Squashfs, big endian
0       string  sqsh    Squashfs filesystem, big endian,
>28     beshort >10     {invalid}
>28     beshort <1      {invalid}
>30     beshort >10     {invalid}
>28     beshort x       version %d.
>30     beshort x       \b%d,
>28     beshort >3      compression:
>>20    beshort 1       \bgzip,
>>20    beshort 2       \blzma,
>>20    beshort 3       \bgzip (non-standard type definition),
>>20    beshort 4       \bxz,
>>20    beshort 5       \blz4,
>>20    beshort 6       \bzstd,
>>20    beshort 0       \b{invalid},
>>20    beshort >6      \b{invalid},
>28     beshort <3
>>8     belong  x       size: %d bytes,
>>8     belong  x       \b{jump:%d}
>>8     belong  x       \b{size:%d}
>28     beshort 3
>>63    bequad  x       size: %ld bytes,
>>63    bequad  x       \b{jump:%ld}
>>63    bequad  x       \b{size:%ld}
>28     beshort >3
>>40    bequad  x       size: %ld bytes,
>>40    bequad  x       \b{jump:%ld}
>>40    bequad  x       \b{size:%ld}
>4      belong  x       %d inodes,
>28     beshort >3
>>12    belong  x       blocksize: %d bytes,
>28     beshort <2
>>32    beshort x       blocksize: %d bytes,
>28     beshort 2
>>51    belong  x       blocksize: %d bytes,
>28     beshort 3
>>51    belong  x       blocksize: %d bytes,
>28     beshort <4
>>39    ubedate  x       created: %s
>28     beshort >3
>>8     ubedate  x       created: %s

# Squashfs, little endian
0       string  hsqs    Squashfs filesystem, little endian,
>28     leshort >10     {invalid}
>28     leshort <1      {invalid}
>30     leshort >10     {invalid}
>28     leshort x       version %d.
>30     leshort x       \b%d,
>28     leshort >3      compression:
>>20    leshort 1       \bgzip,
>>20    leshort 2       \blzma,
>>20    leshort 3       \bgzip (non-standard type definition),
>>20    leshort 4       \bxz,
>>20    leshort 5       \blz4,
>>20    leshort 6       \bzstd,
>>20    leshort 0       \b{invalid},
>>20    leshort >6      \b{invalid},
>28     leshort <3
>>8     lelong  x       size: %d bytes,
>>8     lelong  x       {size:%d}
>28     leshort 3
>>63    lequad  x       size: %ld bytes,
>>63    lequad  x       {size:%ld}
>28     leshort >3
>>40    lequad  x       size: %ld bytes,
>>40    lequad  x       {size:%ld}
>4      lelong  x       %d inodes,
>28     leshort >3
>>12    lelong  x       blocksize: %d bytes,
>28     leshort <2
>>32    leshort x       blocksize: %d bytes,
>28     leshort 2
>>51    lelong  x       blocksize: %d bytes,
>28     leshort 3
>>51    lelong  x       blocksize: %d bytes,
>28     leshort <4
>>39    uledate  x       created: %s
>28     leshort >3
>>8     uledate  x       created: %s
>28     leshort <3
>>8     lelong  x       {jump:%d}
>28     leshort 3
>>63    lequad  x       {jump:%ld}
>28     leshort >3
>>40    lequad  x       {jump:%ld}

# Squashfs with LZMA compression
0       string  sqlz    Squashfs filesystem, big endian, lzma compression,
>28     beshort >10     {invalid}
>28     beshort <1      {invalid}
>30     beshort >10     {invalid}
>28     beshort x       version %d.
>30     beshort x       \b%d,
>28     beshort >3      compression:
>>20    beshort 1       \bgzip,
>>20    beshort 2       \blzma,
>>20    beshort 3       \bgzip (non-standard type definition),
>>20    beshort 4       \blzma (non-standard type definition),
>>20    beshort 5       \blz4,
>>20    beshort 6       \bzstd,
>>20    beshort 0       \b{invalid},
>>20    beshort >6      \b{invalid},
>28     beshort <3
>>8     belong  x       size: %d bytes,
>>8     belong  x       {size:%d}
>28     beshort 3
>>63    bequad  x       size: %ld bytes,
>>63    bequad  x       {size:%ld}
>28     beshort >3
>>40    bequad  x       size: %ld bytes,
>>40    bequad  x       {size:%ld}
>4      belong  x       %d inodes,
>28     beshort >3
>>12    belong  x       blocksize: %d bytes,
>28     beshort <2
>>32    beshort x       blocksize: %d bytes,
>28     beshort 2
>>51    belong  x       blocksize: %d bytes,
>28     beshort 3
>>51    belong  x       blocksize: %d bytes,
>28     beshort <4
>>39    ubedate  x       created: %s
>28     beshort >3
>>8     ubedate  x       created: %s
>28     beshort <3
>>8     belong  x       {jump:%d}
>28     beshort 3
>>63    bequad  x       {jump:%ld}
>28     beshort >3
>>40    bequad  x       {jump:%ld}

# Squashfs 3.3 LZMA signature
0       string  qshs    Squashfs filesystem, big endian, lzma signature,
>28     beshort >10     {invalid}
>28     beshort <1      {invalid}
>30     beshort >10     {invalid}
>28     beshort x       version %d.
>30     beshort x       \b%d,
>28     beshort >3      compression:
>>20    beshort 1       \bgzip,
>>20    beshort 2       \blzma,
>>20    beshort 3       \bgzip (non-standard type definition),
>>20    beshort 4       \bxz,
>>20    beshort 5       \blz4,
>>20    beshort 6       \bzstd,
>>20    beshort 0       \b{invalid},
>>20    beshort >6      \b{invalid},
>28     beshort <3
>>8     belong  x       size: %d bytes,
>>8     belong  x       {size:%d}
>28     beshort 3
>>63    bequad  x       size: %ld bytes,
>>63    bequad  x       {size:%ld}
>28     beshort >3
>>40    bequad  x       size: %ld bytes,
>>40    bequad  x       {size:%ld}
>4      belong  x       %d inodes,
>28     beshort >3
>>12    belong  x       blocksize: %d bytes,
>28     beshort <2
>>32    beshort x       blocksize: %d bytes,
>28     beshort 2
>>51    belong  x       blocksize: %d bytes,
>28     beshort 3
>>51    belong  x       blocksize: %d bytes,
>28     beshort <4
>>39    ubedate  x       created: %s
>28     beshort >3
>>8     ubedate  x       created: %s
>28     beshort <3
>>8     belong  x       {jump:%d}
>28     beshort 3
>>63    bequad  x       {jump:%ld}
>28     beshort >3
>>40    bequad  x       {jump:%ld}

# Squashfs for DD-WRT
0       string  tqsh    Squashfs filesystem, big endian, DD-WRT signature,
>28     beshort >10     {invalid}
>28     beshort <1      {invalid}
>30     beshort >10     {invalid}
>30     beshort <1      {invalid}
>28     beshort x       version %d.
>30     beshort x       \b%d,
>28     beshort >3      compression:
>>20    beshort 1       \bgzip,
>>20    beshort 2       \blzma,
>>20    beshort 3       \bgzip (non-standard type definition),
>>20    beshort 4       \bxz,
>>20    beshort 5       \blz4,
>>20    beshort 6       \bzstd,
>>20    beshort 0       \b{invalid},
>>20    beshort >6      \b{invalid},
>28     beshort <3
>>8     belong  x       size: %d bytes,
>>8     belong  <1      {invalid}
>>8     belong  x       {size:%d}
>28     beshort 3
>>63    bequad  x       size: %ld bytes,
>>63    bequad  <1      {invalid}
>>63    bequad  x       {size:%ld}
>28     beshort >3
>>40    bequad  x       size: %ld bytes,
>>40    bequad  <1      {invalid}
>>40    bequad  x       {size:%ld}
>4      belong  x       %d inodes,
>28     beshort >3
>>12    belong  x       blocksize: %d bytes,
>28     beshort <2
>>32    beshort x       blocksize: %d bytes,
>28     beshort 2
>>51    belong  x       blocksize: %d bytes,
>28     beshort 3
>>51    belong  x       blocksize: %d bytes,
>28     beshort <4
>>39    ubedate  x       created: %s
>28     beshort >3
>>8     ubedate  x       created: %s
>28     beshort <3
>>8     belong  x       {jump:%d}
>28     beshort 3
>>63    bequad  x       {jump:%ld}
>28     beshort >3
>>40    bequad  x       {jump:%ld}

# Squashfs for DD-WRT
0       string  hsqt    Squashfs filesystem, little endian, DD-WRT signature,
>28     leshort >10     {invalid}
>28     leshort <1      {invalid}
>30     leshort >10     {invalid}
>28     leshort x       version %d.
>30     leshort x       \b%d,
>28     leshort >3      compression:
>>20    leshort 1       \bgzip,
>>20    leshort 2       \blzma,
>>20    leshort 3       \bgzip (non-standard type definition),
>>20    leshort 4       \bxz,
>>20    leshort 5       \blz4,
>>20    leshort 6       \bzstd,
>>20    leshort 0       \b{invalid},
>>20    leshort >6      \b{invalid},
>28     leshort <3
>>8     lelong  x       size: %d bytes,
>>8     lelong  x       {size:%d}
>28     leshort 3
>>63    lequad  x       size: %ld bytes,
>>63    lequad  x       {size:%ld}
>28     leshort >3
>>40    lequad  x       size: %ld bytes,
>>40    lequad  x       {size:%ld}
>4      lelong  x       %d inodes,
>28     leshort >3
>>12    lelong  x       blocksize: %d bytes,
>28     leshort <2
>>32    leshort x       blocksize: %d bytes,
>28     leshort 2
>>51    lelong  x       blocksize: %d bytes,
>28     leshort 3
>>51    lelong  x       blocksize: %d bytes,
>28     leshort <4
>>39    uledate  x       created: %s
>28     leshort >3
>>8     uledate  x       created: %s
>28     leshort <3
>>8     lelong  x       {jump:%d}
>28     leshort 3
>>63    lequad  x       {jump:%ld}
>28     leshort >3
>>40    lequad  x       {jump:%ld}

# Non-standard Squashfs signature found on some D-Link routers
0       string  shsq    Squashfs filesystem, little endian, non-standard signature,
>28     leshort >10     {invalid}
>28     leshort <1      {invalid}
>30     leshort >10     {invalid}
>28     leshort x       version %d.
>30     leshort x       \b%d,
>28     leshort >3      compression:
>>20    leshort 1       \bgzip,
>>20    leshort 2       \blzma,
>>20    leshort 3       \bgzip (non-standard type definition),
>>20    leshort 4       \bxz,
>>20    leshort 5       \blz4,
>>20    leshort 6       \bzstd,
>>20    leshort 0       \b{invalid},
>>20    leshort >6      \b{invalid},
>28     leshort <3
>>8     lelong  x       size: %d bytes,
>>8     lelong  x       {size:%d}
>28     leshort 3
>>63    lequad  x       size: %ld bytes,
>>63    lequad  x       {size:%ld}
>28     leshort >3
>>40    lequad  x       size: %ld bytes,
>>40    lequad  x       {size:%ld}
>4      lelong  x       %d inodes,
>28     leshort >3
>>12    lelong  x       blocksize: %d bytes,
>28     leshort <2
>>32    leshort x       blocksize: %d bytes,
>28     leshort 2
>>51    lelong  x       blocksize: %d bytes,
>28     leshort 3
>>51    lelong  x       blocksize: %d bytes,
>28     leshort <4
>>39    uledate  x       created: %s
>28     leshort >3
>>8     uledate  x       created: %s
>28     leshort <3
>>8     lelong  x       {jump:%d}
>28     leshort 3
>>63    lequad  x       {jump:%ld}
>28     leshort >3
>>40    lequad  x       {jump:%ld}

# ext2/ext3 filesystems - Andreas Dilger <adilger@dilger.ca>
# ext4 filesystem - Eric Sandeen <sandeen@sandeen.net>
# volume label and UUID Russell Coker
# http://etbe.coker.com.au/2008/07/08/label-vs-uuid-vs-device/
0x438       uleshort        0xEF53          EXT filesystem,
>0x404      ulelong         x               blocks count: %d,
>0x404      ulelong*1024    x               image size: %d,{jump:%d}
>0x43A      leshort         >4              {invalid}invalid state
>0x43A      leshort         3               {invalid}invalid state
>0x43A      leshort         <0              {invalid}invalid state
>0x43C      leshort         >3              {invalid}invalid error behavior
>0x43C      leshort         <0              {invalid}invalid error behavior
>0x43C      lelong          >4              {invalid}invalid major revision
>0x43C      lelong          <0              {invalid}invalid major revision
>0x43C      lelong          x               rev %d
>0x43E      leshort         x               \b.%d,
# No journal?  ext2
>0x438+36   lelong&0x04     0               ext2 filesystem data
>>0x43A     leshort&0x01    0               (mounted or unclean)
# Has a journal?  ext3 or ext4
>0x438+36   lelong          &0x0000004
#  and small INCOMPAT?
>>0x438+40  lelong          <0x0000040
#   and small RO_COMPAT?
>>>0x438+44 lelong          <0x0000008      ext3 filesystem data
#   else large RO_COMPAT?
>>>0x438+44 lelong          >0x0000007      ext4 filesystem data
#  else large INCOMPAT?
>>0x438+40  lelong          >0x000003f      ext4 filesystem data
>0x438+48   ubelong         x               \b, UUID=%08x
>0x438+52   ubeshort        x               \b-%04x
>0x438+54   ubeshort        x               \b-%04x
>0x438+56   ubeshort        x               \b-%04x
>0x438+58   ubelong         x               \b-%08x
>0x438+60   ubeshort        x               \b%04x
>0x438+64   byte            !0
>>0x438+64  string          x               \b, volume name "%s"


#romfs filesystems - Juan Cespedes <cespedes@debian.org>
0       string      -rom1fs-\0      romfs filesystem, version 1
>8      belong      >10000000       {invalid}
>8      belong      <1              {invalid}
>8      belong      x               size: %d bytes,
>16     string      x               {name:%s}
>16     string      x               named "%s"
>8      belong      x               {size:%d}
>8      belong      x               {jump:%d}

# Not to be confused with an actual romfs image!
# ftp://ftp.dlink.eu/Products/dir/dir-600/driver_software/DIR-600_fw_revC1_3-05B15__all_en_20120216.zip
0x10    string          ROMFS\x20v      D-Link ROMFS filesystem,
>0x17   string          x               version %s,
>0      string          !\x2EmoR
>>0     string          !Rom\x2E        {invalid} unknown endianness
>0      string          \x2EmoR         little endian,
>>8     lelong          x               size: <= %d
#>>8     lelong-0x20     x               {jump:%d}
>0      string          Rom\x2E         big endian,
>>8     belong          x               size: <= %d
#>>8     belong-0x20     x               {jump:%d}

# Wind River MemFS file system, found in some VxWorks devices
0       string    owowowowowowowowowowowowowowow    Wind River management filesystem,{overlap}
>30     string    !ow                               {invalid},
>32     belong    1                                 compressed,
>32     belong    2                                 plain text,
>32     belong    <1                                {invalid}
>32     belong    >2                                {invalid}
>36     belong    x                                 %d files

# Wind River MemFS file system, found in some VxWorks devices
0       string    OWOWOWOWOWOWOWOWOWOWOWOWOWOWOW    Wind River management filesystem,{overlap}
>30     string    !OW                               {invalid},
>32     lelong    1                                 compressed,
>32     lelong    2                                 plain text,
>32     lelong    <1                                {invalid}
>32     lelong    >2                                {invalid}
>36     lelong    x                                 %d files

# ISO 9660 Boot Record - http://wiki.osdev.org/ISO_9660
32768    string      \x00CD001\x01                   ISO 9660 Boot Record,{end}
>7       byte        !0
>>7      string      x                               Boot System Identifier: "%.32s",
>39      byte        !0
>>39     string      x                               Boot Identifier: "%.32s"

# ISO 9660 Primary Volume - http://wiki.osdev.org/ISO_9660
32768    string      \x01CD001\x01\x00               ISO 9660 Primary Volume,{end}
>8       byte        !0
>>8      string      x                               System Identifier: "%.32s",
>40      byte        !0
>>40     string      x                               Volume Identifier: "%.32s"

# netboot image - Juan Cespedes <cespedes@debian.org>
0       lelong              0x1b031336      _linux, Netboot image,
>4      lelong&0xFFFFFF00   0
>>4     lelong&0x100        0x000           mode 2
>>4     lelong&0x100        0x100           mode 3
>4      lelong&0xFFFFFF00   !0              unknown mode {invalid}

18      string            WDK\x202.0\x00    WDK file system, version 2.0,
>11     byte              !0                %d files,
>4      ubedate            !0                Last modified %s GMT

32769   string        CD001                                         ISO{end}
>6144   string        !NSR0                                         9660 CD-ROM filesystem data,
>6144   string        NSR0                                          UDF filesystem data,
>32770  byte          !1                                            {invalid}
>6148   string        1                                             version 1.0,
>6148   string        2                                             version 2.0,
>6148   string        3                                             version 3.0
>6148   byte          >0x33                                         {invalid} version,
>6148   byte          <0x31                                         {invalid} version,
>38     byte          !0
>>38    string        x                                             volume name: "%s",
>2047   string        \000CD001\001EL\x20TORITO\x20SPECIFICATION    bootable

## updated by Joerg Jenderek at Nov 2012
## DOS Emulator image is 128 byte, null right padded header + harddisc image
#0               string      DOSEMU\0        DOS Emulator image
#>0x27E          leshort     !0xAA55         {invalid}
#>0x27E          leshort     0xAA55
##offset is 128
#>>19            byte        128
#>>>(19.b-1)     byte        0x0
#>>>>7           lelong      >0              \b, %d heads
#>>>>11          lelong      >0              \b, %d sectors/track
#>>>>15          lelong      >0              \b, %d cylinders

## From: Alex Beregszaszi <alex@fsn.hu>
#0       string  COWD\x03        VMWare3 disk image,
#>32     lelong  x               (%d/
#>36     lelong  x               \b%d/
#>40     lelong  x               \b%d)

#0       string  COWD\x02    VMWare3 undoable disk image,
#>32     byte    !0
#>32     string  x           "%s"

## TODO: Add header validation
#0       string        VMDK             VMware4 disk image
#0       string        KDMV             VMware4 disk image

#--------------------------------------------------------------------
## Qemu Emulator Image
## Lines written by Friedrich Schwittay (f.schwittay@yousable.de)
## Updated by Adam Buchbinder (adam.buchbinder@gmail.com)
## Made by reading sources, reading documentation, and doing trial and error
## on existing QCOW files
#0       string        QFI\xFB       QEMU QCOW Image

# BSD 2.x file system image; used in RetroBSD for PIC32.
0        string        FS\x3C\x3C       BSD 2.x filesystem,
>1020    string        !\x3E\x3EFS      {invalid}(missing FSMAGIC2),
>8       lelong*1024   x                size: %d bytes,
>8       lelong*1024   x                {size:%d}
>8       lelong*1024   x                {jump:%d}
>8       lelong        x                total blocks: %d,
>972     lelong        x                free blocks: %d,
>968     uledate        x                last modified: %s
>980     byte          !0
>>980    string        x                \b, last mounted on: "%s"

# Simple file system found in Foscam camera firmware
0       beshort  0xbd9a  Foscam WebUI filesystem,
>2      uleshort x       checksum: 0x%X,
>16     lelong   <3      {invalid}invalid first file name length,
>16     lelong   >127    {invalid}invalid first file name length,
>20     byte     0       {invalid}invalid first file name,
>20     byte     !0x2E
>>20    byte     !0x2F
>>>20   byte     <65     {invalid}invalid first file name,
>>>20   byte     >122    {invalid}invalid first file name,
>16     lelong   x       {strlen:%d}
>20     string   x       first file name: "{string}"

# QNX4 Filesystem
0       string   \xEB\x10\x90\x00    QNX4 Boot Block

# QNX6 Filesystem
# https://www.forensicfocus.com/Forums/viewtopic/t=16846/
# Also known as the QNX6_SUPER_MAGIC (in linux sources)
0       string   \x68\x19\x11\x22    QNX6 Super Block

# QNX IFS
0       string    \xEB\x7E\xFF\x00                                  QNX IFS,
>7      byte      !0                                                {invalid}
>50     leshort   !0                                                {invalid}
>52     string    !\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 {invalid}
>36     lelong    x                                                 size: %d bytes,
>36     lelong    x                                                 {size:%d}
>10     leshort   x                                                 machine-type: 0x%x,
>6      byte&0x02 0                                                 little endian,
>6      byte&0x02 !0                                                big endian,
>6      byte&0x1c 0                                                 plain text,
>6      byte&0x1c !0
>>36    lelong    x                                                 {jump:%d}
>6      byte&0x1c 0x02                                              SHIFT-compressed,
>6      byte&0x1c 0x04                                              ZLIB-compressed,
>6      byte&0x1c 0x08                                              LZO-compressed,
>6      byte&0x1c 0x0c                                              UCL-compressed,
>4      uleshort   x                                                version: %d




#--------------------------Firmware Formats---------------------------

# uImage file
# From: Craig Heffner, U-Boot image.h header definitions file
0      ubelong    0x27051956    _linux, uImage header, header size: 64 bytes,
>4     ubelong   x              header CRC: 0x%X,
>8     ubedate   x              created: %s,
>12    belong    <1             {invalid}
>12    ubelong   x              image size: %d bytes,
>16    ubelong   x              Data Address: 0x%X,
>20    ubelong   x              Entry Point: 0x%X,
>24    ubelong   x              data CRC: 0x%X,
>28    byte      0              OS: {invalid}invalid OS,
>28    byte      1              OS: OpenBSD,
>28    byte      2              OS: NetBSD,
>28    byte      3              OS: FreeBSD,
>28    byte      4              OS: 4.4BSD,
>28    byte      5              OS: Linux,
>28    byte      6              OS: SVR4,
>28    byte      7              OS: Esix,
>28    byte      8              OS: Solaris,
>28    byte      9              OS: Irix,
>28    byte      10             OS: SCO,
>28    byte      11             OS: Dell,
>28    byte      12             OS: NCR,
>28    byte      13             OS: LynxOS,
>28    byte      14             OS: VxWorks,
>28    byte      15             OS: pSOS,
>28    byte      16             OS: QNX,
>28    byte      17             OS: Firmware,
>28    byte      18             OS: RTEMS,
>28    byte      19             OS: ARTOS,
>28    byte      20             OS: Unity OS,
>29    byte      0              CPU: {invalid}invalid CPU,
>29    byte      1              CPU: Alpha,
>29    byte      2              CPU: ARM,
>29    byte      3              CPU: Intel x86,
>29    byte      4              CPU: IA64,
>29    byte      5              CPU: MIPS,
>29    byte      6              CPU: MIPS 64 bit,
>29    byte      7              CPU: PowerPC,
>29    byte      8              CPU: IBM S390,
>29    byte      9              CPU: SuperH,
>29    byte      10             CPU: Sparc,
>29    byte      11             CPU: Sparc 64 bit,
>29    byte      12             CPU: M68K,
>29    byte      13             CPU: Nios-32,
>29    byte      14             CPU: MicroBlaze,
>29    byte      15             CPU: Nios-II,
>29    byte      16             CPU: Blackfin,
>29    byte      17             CPU: AVR,
>29    byte      18             CPU: STMicroelectronics ST200,
>30    byte      0              image type: {invalid} Image,
>30    byte      1              image type: Standalone Program,
>30    byte      2              image type: OS Kernel Image,
>30    byte      3              image type: RAMDisk Image,
>30    byte      4              image type: Multi-File Image,
>30    byte      5              image type: Firmware Image,
>30    byte      6              image type: Script file,
>30    byte      7              image type: Filesystem Image,
>30    byte      8              image type: Binary Flat Device Tree Blob
>31    byte      0              compression type: none,
>31    byte      1              compression type: gzip,
>31    byte      2              compression type: bzip2,
>31    byte      3              compression type: lzma,
>32    string    x              image name: "%.32s"

# Hilink encrypted uImage firmware.
# Additional validation/processing is done by the hilink.py plugin.
0x23   string    \x4A\x52\xCA\xDA     _linux, Encrypted Hilink uImage firmware header

#IMG0 header, found in VxWorks-based Mercury router firmware
0       string        IMG0    _linux, IMG0 (VxWorks) header,
>4      belong        <1      {invalid}
>4      belong        x       size: %d

#Mediatek bootloader signature
#From xp-dev.com
0    string        BOOTLOADER!    _linux, Mediatek bootloader

# CSR DFU Image, References:
# Bluez dfutool
# Andrea Bittau's CSR Tools http://darkircop.org/bt/
0    string        CSR-dfu2       _CSR, CSR BlueCore, CSR (XAP2) DFU firmware update header, CSR, 
>8   uleshort      >3             {invalid}  # version consistently observed
>8	 uleshort	   x			Image version: %x,
>10  ulelong	   x 			File size 0x%x,
>14  uleshort	   x			Header size: 0x%x,
>16  string        x			Description {strlen:64},


0    string        CSRbcfw1       _CSR, Bluecore firmware segment
>18  uleshort      !1             {invalid}  # version consistently observed


#CSYS header formats
0    string        CSYS\x00    CSYS header, little endian,
>8   lelong        x           size: %d

0    string        CSYS\x80    CSYS header, big endian,
>8   belong        x           size: %d

# wrgg firmware image
0       string        wrgg02    WRGG firmware header,
>6      string        x         name: "%s",
>48     string        x         root device: "%s"

# trx image file
0       string        HDR0    TRX firmware header, little endian,
>4      lelong        <1      {invalid}
>4      ulelong       x       image size: %d bytes,
>8      ulelong       x       CRC32: 0x%X,
>12     uleshort      x       flags: 0x%X,
>14     uleshort      !1
>>14    uleshort      !2      {invalid}
>14     uleshort      2       version: %d, header size: 32 bytes,
>>16    ulelong       x       loader offset: 0x%X,
>>20    ulelong       x       linux kernel offset: 0x%X,
>>24    ulelong       x       rootfs offset: 0x%X,
>>28    ulelong       x       bin-header offset: 0x%X
>14     uleshort      1       version: %d, header size: 28 bytes,
>>16    ulelong       x       loader offset: 0x%X,
>>20    ulelong       x       linux kernel offset: 0x%X,
>>24    ulelong       x       rootfs offset: 0x%X

14      string        U2ND      BIN-Header,
>4      ulelong       !0        {invalid}
>22     string        !\x00*10  {invalid}
>0      string        x         board ID: %.4s,
>18     ubyte         0         hardware version: 4702,
>18     ubyte         1         hardware version: 4712,
>18     ubyte         2         hardware version: 4712L,
>18     ubyte         3         hardware version: 4704,
>18     ubyte         >3        hardware version: unknown (code: 0x%.2X),
>11     ubyte         x         firmware version: %d.
>12     ubyte         x         \b%d.
>12     ubyte         x         \b%d,
>8      ubyte         <80
>>8     ubyte         x         build date: 20%.2d-
>8      ubyte         >79
>>8     ubyte         x         build date: 19%.2d-
>9      ubyte         x         \b%.2d-
>10     ubyte         x         \b%.2d

# Ubicom firmware image
0       belong    0xFA320080    Ubicom firmware header,
>12     ubelong   x             checksum: 0x%X,
>24     belong    <0            {invalid}
>24     belong    x             image size: %d

# The ROME bootloader is used by several RealTek-based products.
# Unfortunately, the magic bytes are specific to each product, so
# separate signatures must be created for each one.

# Netgear KWGR614 ROME image
0     string         G614          Realtek firmware header, ROME bootloader,
>4    beshort        0xd92f        image type: KFS,
>4    beshort        0xb162        image type: RDIR,
>4    beshort        0xea43        image type: BOOT,
>4    beshort        0x8dc9        image type: RUN,
>4    beshort        0x2a05        image type: CCFG,
>4    beshort        0x6ce8        image type: DCFG,
>4    beshort        0xc371        image type: LOG,
>6    byte           x             header version: %d,
>10   ubyte          >12           {invalid} month
>12   ubyte          >31           {invalid} day
>8    ubyte          >3000         {invalid} year
#month
>10   byte           x             created: %d/
#day
>12   byte           x             \b%d/
#year
>8    beshort        x             \b%d,
>16   belong         x             image size: %d bytes,
>22   ubyte          x             body checksum: 0x%X,
>23   ubyte          x             header checksum: 0x%X

# Linksys WRT54GX ROME image
0       belong          0x59a0e842      Realtek firmware header, ROME bootloader,
>4      ubeshort        0xd92f          image type: KFS,
>4      ubeshort        0xb162          image type: RDIR,
>4      ubeshort        0xea43          image type: BOOT,
>4      ubeshort        0x8dc9          image type: RUN,
>4      ubeshort        0x2a05          image type: CCFG,
>4      ubeshort        0x6ce8          image type: DCFG,
>4      ubeshort        0xc371          image type: LOG,
>6      byte            x               header version: %d,
>10     ubyte           >12             {invalid}invalid month
>12     ubyte           >31             {invalid}invalid day
>8      ubyte           >3000           {invalid}invalid year
#month
>10     byte            x               created: %d/
#day
>12     byte            x               \b%d/
#year
>8      beshort         x               \b%d,
>16     belong          x               image size: %d bytes,
>22     ubyte           x               body checksum: 0x%X,
>23     ubyte           x               header checksum: 0x%X

# PackImg tag, somtimes used as a delimiter between the kernel and rootfs in firmware images.
0       string        --PaCkImGs      PackImg section delimiter tag,
>10     string        !--             {invalid}
# If the size in both big and little endian is greater than 512MB, consider this a false positive
>16     ulelong       >0x20000000
>>16    ubelong       >0x20000000    {invalid}
>16     lelong        <0
>>16    belong        <0             {invalid}
>16     lelong        >0
>>16    lelong        x              little endian size: %d bytes;
>16     belong        >0
>>16    belong        x              big endian size: %d bytes


#------------------------------------------------------------------------------
# Broadcom header format
#
0       string          BCRM            Broadcom header,
>4      lelong          <0              {invalid}
>4      lelong          x               number of sections: %d,
>>8     lelong          18              first section type: flash
>>8     lelong          19              first section type: disk
>>8     lelong          21              first section type: tag


# Berkeley Lab Checkpoint Restart (BLCR) checkpoint context files
# http://ftg.lbl.gov/checkpoint
0       string  Ck0\0\0R\0\0\0  BLCR
>16     lelong  0               {invalid}
>16     ulelong >7              {invalid}
>16     lelong  1               x86
>16     lelong  3               alpha
>16     lelong  5               x86-64
>16     lelong  7               ARM
>8      lelong  x               context data (little endian, version %d)

0       string  \0\0\0C\0\0\0R  BLCR
>16     lelong  <2              {invalid}
>16     ulelong >8              {invalid}
>16     belong  2               SPARC
>16     belong  4               ppc
>16     belong  6               ppc64
>16     belong  7               ARMEB
>16     belong  8               SPARC64
>8      belong  x               context data (big endian, version %d)

# Aculab VoIP firmware
# From: Mark Brown <broonie@sirena.org.uk>
0       string  VoIP\x20Startup\x20and      Aculab VoIP firmware
>35     string  x                           format "%s"

#------------------------------------------------------------------------------
# HP LaserJet 1000 series downloadable firmware file
0       string  \xbe\xefABCDEFGH        HP LaserJet 1000 series downloadable firmware

# From Albert Cahalan <acahalan@gmail.com>
# really le32 operation,destination,payloadsize (but quite predictable)
# 01 00 00 00 00 00 00 c0 00 02 00 00
0       string          \1\0\0\0\0\0\0\300\0\2\0\0      Marvell Libertas firmware

#---------------------------------------------------------------------------
# The following entries have been tested by Duncan Laurie <duncan@sun.com> (a
# lead Sun/Cobalt developer) who agrees that they are good and worthy of
# inclusion.

# Boot ROM images for Sun/Cobalt Linux server appliances
0       string  Cobalt\x20Networks\x20Inc.\nFirmware\x20v     _linux, Paged COBALT boot rom
>38     string  x                                             V%.4s

# New format for Sun/Cobalt boot ROMs is annoying, it stores the version code
# at the very end where file(1) can't get it.
0       string CRfs     COBALT boot rom data (Flat boot rom or file system)


#Windows CE Binary Image Data Format aka B000FF
#More information on the format:
#http://msdn.microsoft.com/en-us/library/ms924510.aspx
#http://forum.xda-developers.com/showthread.php?t=801167
0    string    B000FF    Windows CE image header,
>7   ulelong   x         image start: 0x%X,
>11  ulelong   x         image length: %d
>11  ulelong   x         {size:%d}

#Windows CE RomImage
63    string    \x00ECEC     Windows CE memory segment header,
>4    ulelong   x            TOC address: 0x%X


# --------------------------------
# ZynOS ROM header format
# From openwrt zynos.h.
6      string      SIG          ZynOS header, header size: 48 bytes,
>3     byte        <0x7F        rom image type:
>>3    byte        <1           {invalid},
>>3    byte        >7           {invalid},
>>3    byte        1            ROMIMG,
>>3    byte        2            ROMBOOT,
>>3    byte        3            BOOTEXT,
>>3    byte        4            ROMBIN,
>>3    byte        5            ROMDIR,
>>3    byte        6            6,
>>3    byte        7            ROMMAP,
>3     byte        >0x7F        ram image type:
>>3    byte        >0x82        {invalid},
>>3    byte        0x80         RAM,
>>3    byte        0x81         RAMCODE,
>>3    byte        0x82         RAMBOOT,
>4     ubelong     >0x40000000  {invalid}
>4     belong      <0           {invalid}
>4     belong      0            {invalid}
>4     belong      x            uncompressed size: %d,
>8     belong      >0x40000000  {invalid}
>8     belong      <0           {invalid}
>8     belong      0            {invalid}
>8     belong      x            compressed size: %d,
>14    ubeshort    x            uncompressed checksum: 0x%X,
>16    ubeshort    x            compressed checksum: 0x%X,
>12    ubyte       x            flags: 0x%X,
>12    byte        &0x40        uncompressed checksum is valid,
>12    ubyte       &0x80        the binary is compressed,
>>12   byte        &0x20        compressed checksum is valid,
>35    ubelong     x            memory map table address: 0x%X

# Firmware header used by some VxWorks-based Cisco products
0      string        CI032.00       _linux, Cisco VxWorks firmware header,
>8     lelong        >1024          {invalid}
>8     lelong        <0             {invalid}
>8     lelong        x              header size: %d bytes,
>32    lelong        >1024          {invalid}
>32    lelong        <0             {invalid}
>32    lelong        x              number of files: %d,
>48    lelong        <0             {invalid}
>48    lelong        x              image size: %d,
>64    string        x              firmware version: "%s"

# Simple VxWorks reference strings
#0    string        VxWorks        VxWorks string referece:
#>0    string        x            "%s"
#0    string        vxworks        VxWorks string referece:
#>0    string        x            "%s"
#0    string        VXWORKS        VxWorks string referece:
#>0    string        x            "%s"

# Firmware header used by some TV's
0      string        FNIB     ZBOOT firmware header, header size: 32 bytes,
>8     ulelong       x        load address: 0x%.8X,
>12    ulelong       x        start address: 0x%.8X,
>16    ulelong       x        checksum: 0x%.8X,
>20    ulelong       x        version: 0x%.8X,
>24    lelong        <1       {invalid}
>24    ulelong       x        image size: %d bytes

# Firmware header used by several D-Link routers (and probably others)
0               string  \x5e\xa3\xa4\x17        DLOB firmware header,{jump:108}
>(7.b+12)       string  !\x5e\xa3\xa4\x17       {invalid},
#>>12           string  x                       %s,
>(7.b+40)       string  x                       boot partition: "%s"

# TP-Link firmware header structure; thanks to Jonathan McGowan for reversing and documenting this format
4          string          TP-LINK\x20Technologies _linux, TP-Link firmware header,
#>-4    lelong          x                       header version: %d,
>0x94      beshort         x                       firmware version: %d.
>0x96      beshort         x                       \b%d.
>0x98      beshort         x                       \b%d,
>0x18      string          x                       image version: "%s",
#>0x74  belong          x                       image size: %d bytes,
>0x3C      belong          x                       product ID: 0x%X,
>0x40      belong          x                       product version: %d,
>0x70      ubelong         x                       kernel load address: 0x%X,
>0x74      ubelong         x                       kernel entry point: 0x%X,
>0x7C      ubelong         x                       kernel offset: %d,
>0x80      ubelong         x                       kernel length: %d,
>0x84      ubelong         x                       rootfs offset: %d,
>0x88      ubelong         x                       rootfs length: %d,
>0x8C      ubelong         x                       bootloader offset: %d,
>0x90      ubelong         x                       bootloader length: %d

# Header format from: http://skaya.enix.org/wiki/FirmwareFormat
0       string        \x36\x00\x00\x00          Broadcom 96345 firmware header, header size: 256,
>4      string        !Broadcom
>>4     string        !\x20\x20\x20\x20         {invalid}
>41     beshort       !0x2020
>>41    beshort       !0x0000
>>>41   string        x                         firmware version: "%.4s",
>45     beshort       !0x0202
>>45    beshort       !0x0000
>>>45   string        x                         board id: "%s",
>236    ubelong       x                         ~CRC32 header checksum: 0x%X,
>216    ubelong       x                         ~CRC32 data checksum: 0x%X

# Xerox MFP DLM signatures
0       string        %%XRXbegin                Xerox DLM firmware start of header
0       string        %%OID_ATT_DLM_NAME        Xerox DLM firmware name:
>19     string        x                         "%s"
0       string        %%OID_ATT_DLM_VERSION     Xerox DLM firmware version:
>22     string        x                         "%s"
0       string        %%XRXend                  Xerox DLM firmware end of header


# Sercomm firmware header
0       string         sErCoMm          Sercomm firmware signature,
>7      uleshort       x                version control: %d,
>9      uleshort       x                download control: %d,
>11     byte           0                {invalid}
>11     string         x                hardware ID: "%s",
>44     uleshort       x                hardware version: 0x%X,
>58     uleshort       x                firmware version: 0x%X,
>60     uleshort       x                starting code segment: 0x%X,
>62     uleshort       x                code size: 0x%X

# NPK firmware header, used by Mikrotik
0           belong        0x1EF1D0BA   NPK firmware header,
>4          lelong        <0           {invalid}
>4          lelong        x            image size: %d,
>14         string        x            image name: "%s",
>(48.l+58)  string        x            description: "%s"

# Ubiquiti firmware signatures
0       string      UBNT        Ubiquiti firmware header, header size: 264 bytes,
>0x108  belong      !0          {invalid},
>0x104  ubelong     x           ~CRC32: 0x%X,
>4      byte        0           {invalid},
>4      string      x           version: "%s"

0       string      GEOS        Ubiquiti firmware header, header size: 264 bytes,
>0x108  belong      !0          {invalid},
>0x104  ubelong     x           ~CRC32: 0x%X,
>4      byte        0           {invalid},
>4      string      x           version: "%s"

0       string      OPEN        Ubiquiti firmware header, third party,
>0x108  belong      !0          {invalid},
>0x104  ubelong     x           ~CRC32: 0x%X,
>4      byte        0           {invalid},
>4      string      x           version: "%s"

-4  string      \x00\x00\x00\x00PART    Ubiquiti partition header,
>0  byte        x                       header size: 56 bytes,
>0  byte        0                       {invalid}
>0  string      x                       name: "%s",
>40 ubelong     x                       base address: 0x%.8X,
>48 belong      x                       data size: %d bytes{size:%d}

-4  string      \x00\x00\x00\x00END\x2e Ubiquiti end header, header size: 12 bytes,
>8  belong      !0                      {invalid},
>4  ubelong     x                       cumulative ~CRC32: 0x%.8X

-4   string      \x00\x00\x00\x00ENDS   Signed Ubiquiti end header, RSA 2048 bit, header size: 264 bytes
>260 ubelong     !0                     {invalid}

# Ubiquiti additional data
-4           string   \x00\x00\x00\x00EXEC  Ubiquiti firmware additional data,
# Non-empty string (16 bytes max)
>4           byte     0                     {invalid}
>4           string   x                         name: %s,
# Size of attached data
>48          ubelong  x                         size: %d bytes,
# Size, again
>52          ubelong  x                         size2: %d bytes,
# CRC32 of header + data
>>(48.L+56)  ubelong  x                         CRC32: %x
# Padding
>>(48.L+60)  ubelong  !0                    {invalid}

# Found in DIR-100 firmware
0       string      AIH0        AIH0 firmware header, header size: 48,
>12     ubelong     0           {invalid}
>12     ubelong+48  x           {size:%d}
>12     ubelong     x           data size: %d,
>8      ubelong     !0          executable code,
>>8     ubelong&3   !0          {invalid}
>>8     ubelong     x           load address: 0x%X,
>32     string      x           version: "%s"

0       belong      0x5EA3A417      SEAMA firmware header, big endian,
>4      beshort     !0              {invalid}
>6      beshort     x               meta size: %d,
>8      belong      <1              {invalid}
>8      belong      x               image size: %d

0       lelong      0x5EA3A417      SEAMA firmware header, little endian,
>4      leshort     !0              {invalid}
>6      leshort     x               meta size: %d,
>8      lelong      <1              {invalid}
>8      lelong      x               image size: %d

0       belong      0x4D544443      NSP firmware header, big endian,
>16     belong      <1              {invalid}
>16     belong      x               header size: %d,
>20     belong      <1              {invalid}
>20     belong      x               image size: %d,
>20     belong      x               {size:%d}
>4      belong      <1              {invalid}
>4      ubelong     x               kernel offset: %d,
>12     belong      <1              {invalid}
>12     belong      x               header version: %d,

0       lelong      0x4D544443      NSP firmware header, little endian,
>16     lelong      <1              {invalid}
>16     lelong      x               header size: %d,
>20     lelong      <1              {invalid}
>20     lelong      x               image size: %d,
>20     lelong      x               {size:%d}
>4      lelong      <1              {invalid}
>4      ulelong     x               kernel offset: %d,
>12     lelong      <1              {invalid}
>12     lelong      x               header version: %d,

# http://www.openwiz.org/wiki/Firmware_Layout#Beyonwiz_.wrp_header_structure
0       string        WizFwPkgl    Beyonwiz firmware header,
>20     string        x            version: "%s"

0       string      BLI223WJ0   Thompson/Alcatel encoded firmware,
>32     byte        x           version: %d.
>33     byte        x           \b%d.
>34     byte        x           \b%d.
>35     byte        x           \b%d,
>44     belong      x           size: %d,
>48     ubelong     x           crc: 0x%.8X,
>35     byte        x           try decryption tool from:
>35     byte        x           http://web.archive.org/web/20130929103301/http://download.modem-help.co.uk/mfcs-A/Alcatel/Modems/Misc/

# http://android.stackexchange.com/questions/23357/\
# is-there-a-way-to-look-inside-and-modify-an-adb-backup-created-file/\
# 23608#23608
0       string  ANDROID\040BACKUP\n     Android Backup
>15     string  1\n                     \b, version 1
>17     string  0\n                     \b, uncompressed
>17     string  1\n                     \b, compressed
>19     string  none\n                  \b, unencrypted
>19     string  AES-256\n               \b, encrypted AES-256

# https://github.com/omnirom/android_bootable_recovery/blob/android-7.1/adbbu/twadbstream.h
0        string       TWRP\x00\x00\x00\x00                                TWRP Backup,
>0x8     string       twstreamheader\x00\x00                              AdbBackupStreamHeader,
>>0x2C   string       \x00*468
>>0x18   ulequad      x                                                   TWRP Parititon Count: %d,
>>0x20   ulequad      x                                                   ADB Backup Version: %d,
>>0x28   ubelong      x                                                   CRC32 data checksum: 0x%X
>0x8     string       twfilename\x00\x00\x00\x00\x00\x00                  twfilehdr (twfilename),
>>0x18   ulequad      x                                                   Size: %d,
>>0x20   ulequad      x                                                   Compressed: %d,
>>0x28   ubelong      x                                                   CRC32 data checksum: 0x%X,
>>0x2C   string       x                                                   Filename: %s{jump:468}
>0x8     string       twimage\x00\x00\x00\x00\x00\x00\x00\x00\x00         twfilehdr (twimage),
>>0x18   ulequad      x                                                   Size: %d,
>>0x20   ulequad      x                                                   Compressed: %d,
>>0x28   ubelong      x                                                   CRC32 data checksum: 0x%X,
>>0x2C   string       x                                                   Filename: %s{jump:468}
>0x8     string       md5trailer\x00\x00\x00\x00\x00\x00                  AdbBackupFileTrailer,
>>0x48   string       \x00*440
>>0x18   ubelong      x                                                   zlib CRC32 data checksum: 0x%X,
>>0x1C   ubelong      x                                                   CRC32 data checksum: 0x%X,
>>0x20   string       x                                                   MD5: %s,
>0x8     string       twendadb\x00\x00\x00\x00\x00\x00\x00\x00            AdbBackupControlType (twendadb),
>>0x18   ubelong      x                                                   CRC32 data checksum: 0x%X
>>0x1C   string       \x00*484
>0x8     string       tweof\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00   AdbBackupControlType (tweof),
>>0x18   ubelong      x                                                   CRC32 data checksum: 0x%X
>>0x1C   string       \x00*484
>0x8     string       twverifymd5\x00\x00\x00\x00\x00                     AdbBackupControlType (twverifymd5),
>>0x18   ubelong      x                                                   CRC32 data checksum: 0x%X
>>0x1C   string       \x00*484
>0x8     string       twdatablock\x00\x00\x00\x00\x00                     AdbBackupControlType (twdatablock),
>>0x18   ubelong      x                                                   CRC32 data checksum: 0x%X
>>0x1C   string       \x00*484
>0x8     string       twerror\x00\x00\x00\x00\x00\x00\x00\x00\x00         AdbBackupControlType (twerror),
>>0x18   ubelong      x                                                   CRC32 data checksum: 0x%X
>>0x1C   string       \x00*484


# http://forum.xda-developers.com/showthread.php?p=47818657
8    string    imgARMcC         Roku aimage SB

# Boot ROM images for Sun/Cobalt Linux server appliances
0       string    Cobalt\ Networks\ Inc.\nFirmware\ v    _linux, Paged Sun/COBALT boot rom,
>38     string    x                        version: "%.4s"

# ZyXEL config signatures
6           string      dbgarea                  ZyXEL rom-0 configuration block, name: "%s",
>16         ubeshort    x                        compressed size: %d,
>14         ubeshort    x                        uncompressed size: %d,
>18         ubeshort+16 x                        data offset from start of block: %d

6           string      spt.dat                  ZyXEL rom-0 configuration block, name: "%s",
>16         ubeshort    x                        compressed size: %d,
>14         ubeshort    x                        uncompressed size: %d,
>18         ubeshort+16 x                        data offset from start of block: %d

6           string      autoexec.net             ZyXEL rom-0 configuration block, name: "%s",
>16         ubeshort    x                        compressed size: %d,
>14         ubeshort    x                        uncompressed size: %d,
>18         ubeshort+16 x                        data offset from start of block: %d

# Obfuscated Arcadyan firmware
0x68    string  \x00\xD5\x08                    Obfuscated Arcadyan firmware,
>0x6B   byte    !0                              {invalid} signature trailing byte [0x%X],{invalid}
# None of the known Arcadyan signatures bytes have a NULL byte
>0      byte    0                               {invalid}
>1      byte    0                               {invalid}
>2      byte    0                               {invalid}
>3      byte    0                               {invalid}
>0      ubelong x                               signature bytes: 0x%X,
>0x70   string  !\x00\x00\x00\x00\x00\x00       {invalid} padding bytes{invalid}

# Digi firmware images
0xC0            string  Digi            Digi International firmware,
>0xC8           beshort !0x4253
>>0xC8          beshort !0x4950
>>>0xC8         beshort !0x4944
>>>>0xC8        beshort !0x444f
>>>>>0xC8       beshort !0x4443
>>>>>>0xC8      beshort !0x4f53
>>>>>>>0xC8     beshort !0x4f43
>>>>>>>>0xC8    beshort !0x4646
>>>>>>>>>0xC8   beshort !0x5350         {invalid}invalid header,
>0xD4           ubelong x               load address: 0x%.8X,
>0xDC           ubelong x               entry point: 0x%.8X,

# Lancom firmware signatures, courtesy of christophvw
0    string            ELSF              LANCOM firmware header,
>22  string            x                 model: "%s",
>18  string            x                 firmware version: "%.4s",
>12  ubyte             255               Rel,
>12  ubyte             253               alpha,
>12  ubyte             220               PR,
>12  ubyte             >0
>>12 ubyte             <220              RC%d,
>12  ubyte             >220
>>12 ubyte-220         <237              RU%d,
>12  ubyte             0                 dev
>17  ubyte             >0
>>17 ubyte             x                 build %d
#get build date
>7   ubyte             !63
#date is stored as string
>>7  string            x                 ("%.8s")

0    string            ELSO              LANCOM OEM file

0    string            ELSB              LANCOM firmware loader,
>22  string            x                 model: "%s",
>18  string            x                 loader version: "%.4s",


0    string            ELSC              LANCOM WWAN firmware
>4   ubyte             3
>>5  beshort           0
>>7  string            x                 \b, "%s"

0               string      ELSP                    LANCOM file entry
>(198.L+202)    belong      !2
>>(198.L+202)   belong      !3                      {invalid}
>202            string      @(RECENT_FIRMWARE)/     \b, file name:
>>221           string      x                       "%s"
>>221           string      x                       \b{name:%s}
>(198.L+202)    belong      2
>>(198.L+206)   belong      <1                      {invalid}
>>(198.L+206)   belong      x                       \b, file size: %d bytes
>>(198.L+206)   belong      x                       \b{size:%d}
>(198.L+202)    belong      3
>>&4            string      @(RECENT_FIRMWARE)/     \b, alias:
>>&23           string      x                       "%s"
>>(&0.L+4)      belong      x                       \b, file size: %d bytes

# Another Broadcom firmware header...
# The header seems to be always 0x100 bytes length and there is more information than the one displayed (not sure about the meaning).
# Used for example in the EchoLife HG556a router
0x0	string 	\x38\x00\x00\x00	Broadcom firmware header
>0x4	string	!Broadcom Corporatio	{invalid}
>0x18	string	x			%s.
>0x8E	string	x			Model: %s.
>0xA2	string	x			Firmware version: %s.

# QNAP encrypted firmware
0       string       icpnas                  QNAP encrypted firmware footer
>10     string       x                       , model: %s
>26     string       x                       , version: %s
>42     uleshort     !0
>>42    string       x                       , date: %s

# Mediatek
0   string  SF_BOOT\x00\x00\x00\x00\x00  Mediatek Serial Flash Image
>12 lelong <1 {invalid}
>12 lelong >1 {invalid}
>12 lelong x  Version %d
0   string  EMMC_BOOT\x00\x00\x00    Mediatek EMMC Flash Image
>12 lelong <1 {invalid}
>12 lelong >1 {invalid}
>12 lelong x  Version %d
0   string  NOR_BOOT\x00\x00\x00\x00 Mediatek NOR Flash Image
>12 lelong <1 {invalid}
>12 lelong >1 {invalid}
>12 lelong x  Version %d

0  string BRLYT\x00\x00\x00 Mediatek Boot Header
>8 lelong <1 {invalid}
>8 lelong >1 {invalid}
>8 lelong x Version %d

0 string BBBB Boot section{overlap}
>8 lelong x Start 0x%X
>12 lelong x End 0x%X
>16 lelong &0x1 Load-by-Bootrom
>16 lelong &0x80000000 Internal-RAM
>16 lelong &0x7ffffff0 {invalid}

0 string FILE_INFO\x00\x00\x00 Mediatek File Info
>12 lelong <1 {invalid}
>12 lelong >1 {invalid}
>16 leshort 0 File Type: NONE
>16 leshort 1 File Type: ARM-Bootloader
>16 leshort 2 File Type: ARM-External-Bootloader
>16 leshort 10 File Type: Root-Certificate
>16 leshort 256 File Type: Primary-MAUI
>16 leshort 264 File Type: VIVA
>16 leshort 769 File Type: SECURE_RO_ME
>18 byte 0 Flash Type: NONE
>18 byte 1 Flash Type: NOR Flash
>18 byte 2 Flash Type: NAND Sequential Flash
>18 byte 3 Flash Type: NAND_TTBL
>18 byte 4 Flash Type: NAND_FDM50
>18 byte 5 EMMC-Boot-Region
>18 byte 6 EMMC-Data-Region
>18 byte 7 Flash Type: Serial Flash
>18 byte 255 Flash Type: Device-End
>18 byte >20 {invalid}
>19 byte 0 No Signature
>19 byte 1 Signature Type: PHASH
>19 byte 2 Signature Type: SINGLE
>19 byte 3 Signature Type: SINGLE and PHASH
>19 byte 4 Signature Type: MULTI
>19 byte 5 Signature Type: TYPE_NUM
>19 byte 255 Signature Type: TYE_END
>19 byte >20 {invalid}
>20 lelong x Load Address: 0x%X
>24 lelong x File Length: %d
>28 lelong x Maximum Size: %d
>32 lelong x Content Offset: 0x%X
>36 lelong x Signature Lenght: %d
>40 lelong x Jump Offset: %d
>44 lelong &0x1 POST_BUILD_DONE
>44 lelong &0x2 XIP (Execute In Place)
>44 lelong &0x4 SLT
>44 lelong &0xffffff00 {invalid}

# Android bootimg
# https://android.googlesource.com/platform/system/core.git/+/master/mkbootimg/bootimg.h
0     string     ANDROID!      Android bootimg
>8    ulelong    x             \b, kernel size: %d bytes
>12   ulelong    x             \b, kernel addr: 0x%X
>16   ulelong    x             \b, ramdisk size: %d bytes
>20   ulelong    x             \b, ramdisk addr: 0x%X
>48   string     x             \b, product name: "%s"

# QCDT
# https://source.codeaurora.org/quic/la/device/qcom/common/tree/dtbtool?h=LA.BF64.1.2.2_rb4.42
0     string     QCDT          Qualcomm device tree container
>4    ulelong    x             \b, version: %u
>8    ulelong    x             \b, DTB entries: %u

# Nexus BOOTLDR
# https://github.com/NVISO-BE/nexus_5_bootloader_unpacker
0     string     BOOTLDR!      Nexus bootloader image
>8    ulelong    <1            {invalid}
>8    ulelong    x             \b, num images: %u
>12   ulelong    x             \b, bootldr size: %u

# Nexus IMGDATA
# https://github.com/bitdomo/imgdata/tree/hammerhead
0     string     IMGDATA!      Nexus IMGDATA
>12   ulelong    >100          {invalid}
>12   ulelong    x             \b, entries: %u

# Motorola bootlogo container
# https://github.com/grub4android/lk/blob/master-uboot/app/aboot/aboot.c#L2710
0     string     MotoLogo\x00  Motorola bootlogo container

# Motorola RLE bootlogo
# https://github.com/grub4android/lk/blob/master-uboot/app/aboot/aboot.c#L2710
0     string     MotoRun\x00   Motorola RLE bootlogo
>8    ubeshort   x             \b, width: %u
>10   ubeshort   x             \b, height: %u

# Motorola UTAGS
# https://github.com/MotorolaMobilityLLC/kernel-msm/blob/marshmallow-6.0.0-release/drivers/misc/utag/utags.c
0     string     __UTAG_HEAD__\x00   Motorola UTAGS
>32   ulelong    x                   \b, size: %u
>36   ulelong    x                   \b, flags: %x
>40   ulelong    x                   \b, crc32: %x

## Qualcomm splash screen
## https://source.codeaurora.org/quic/la/device/qcom/common/tree/display/logo/logo_gen.py?h=LA.BR.1.3.3-06310-8952.0
#0     string     SPLASH!!      Qualcomm splash screen
#>8    ulelong    x             \b, width: %u
#>12   ulelong    x             \b, height: %u
#>16   ulelong    x             \b, type: %u
#>20   ulelong    x             \b, blocks: %u

# Qualcomm SBL1
0     string     \xd1\xdc\x4b\x84\x34\x10\xd7\x73      Qualcomm SBL1
>24   ulelong    x                                     \b, image addr: %x
>28   ulelong    x                                     \b, image size: %u
>32   ulelong    x                                     \b, code size: %u
>40   ulelong    x                                     \b, sig size: %u
>48   ulelong    x                                     \b, cert chain size: %u
>52   ulelong    x                                     \b, oem_root_cert_sel: %u
>56   ulelong    x                                     \b, oem_num_root_certs: %u



# ATAGs msm nand partition table
# https://github.com/roman-yepishev/acer-tools/tree/master/msmptbl
0    ubequad  0x9a1b7daabc487d1f   ATAGs msm parition table (msmptbl),
>8   lelong   >0                   version: %X,
>>12 lelong   >0                   number of paritions: %d
>8   lelong   <0                   {invalid}

# MCastFS2 (.mcfs)
# http://support.aminocom.com/link/portal/1108/1281/Article/1204/Software-for-Aminet-set-top-boxes
0       string      \x0E\x00\x4D\x43\x61\x73\x74\x46\x53\x32\x00\x00    Amino MCastFS2 (.mcfs)


# Intel microcode package. Might contain more than one, but using only magic
# files, it's not fun to detect them. Also, it uses BCD dates, that's why the date format looks weird.
# Header version is always 1
0x0        ulelong     1        Intel x86 or x64 microcode,
# Signature of the applicable model, cannot be 0. It might be possible to narrow this down a bit.
>0x0c      ulelong     !0       sig 0x%08x,
#
>0x18      ulelong     x        pf_mask 0x%02x,
# Year
>0x09      ubyte       >0x20    {invalid}
>0x09      ubyte       <0x19    {invalid}
>0x08      uleshort    x        %04X-
# Month, BCD, test if 0x01 <= month <= 19
>0x0b      ubyte       0        {invalid}
>0x0b      ubyte&0xf0  >0x10    {invalid}
>0x0b      ubyte&0x0f  >0x09    {invalid}
>0x0b      ubyte       x        \b%02X-
# Day, BCD, test if 0x01 <= day <= 39
>0x0a      ubyte&0xf0  >0x30    {invalid}
>0x0a      ubyte&0x0f  >0x09    {invalid}
>0x0a      ubyte       0        {invalid}
>0x0a      ubyte       x        \b%02X,
# The revision of the microcode update
>0x04      lelong      !0       rev 0x%04x,
# Total size, useful for extraction?
>0x20      ulelong     0        size 2048 {size:2048}
>0x20      ulelong     !0       size %d {size:%d}
# Reserved, always zero as of 2018-09-23
>0x24      ulelong     0
>0x28      ulelong     0
>0x2c      ulelong     0

# Flattened device tree
# Device Tree specification v0.2
# https://github.com/devicetree-org/devicetree-specification/releases/download/v0.2/devicetree-specification-v0.2.pdf
# Device tree magic
0           ubelong   0xd00dfeed  _linux, Flattened device tree,
# Device tree size, may not be less than header size (40)
>4          ubelong   <40         {invalid}
>4          ubelong   x               size: %d bytes,
# Offset of structure block, may not be less than header size (40), must be aligned to 4 byte boundary
>8          ubelong   <40         {invalid}
>8          ubelong&3 !0          {invalid}
>8          ubelong   !0
# First node of structure block, must be either FDT_BEGIN_NODE (1), FDT_NOP (4) or FDT_END (9)
>>(8.L)     ubelong   !1
>>>(8.L)    ubelong   !4
>>>>(8.L)   ubelong   !9          {invalid}
>>>>(8.L)   ubelong   9               empty device tree,
# Offset of strings block, may not be less than header size (40)
>12         ubelong   <40         {invalid}
# Version
>20         ubelong   x               version: %d
# Size of strings block, must be greater than 0
>32         ubelong   0           {invalid}
# Size of structure block, must be greater than 0
>36         ubelong   0           {invalid}

# Toshiba SSD Firmware Update
# The version string seems to be at 0xe2f4, but I'm unsure if that offset is fixed
0           string    ID\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 Toshiba SSD Firmware Update

# bix file
# This is just a U-Boot header file with different magic at offset 0. It is
# used by at least Zyxel in their GS1900-series switches, but shows up in
# firmware for Cisco Sx220 switches as well.
0      ubelong   0x83800000     _linux, bix header, header size: 64 bytes,
>4     ubelong   x              header CRC: 0x%X,
>8     ubedate   x              created: %s,
>12    belong    <1             {invalid}
>12    ubelong   x              image size: %d bytes,
>16    ubelong   x              Data Address: 0x%X,
>20    ubelong   x              Entry Point: 0x%X,
>24    ubelong   x              data CRC: 0x%X,
>28    byte      0              OS: {invalid}invalid OS,
>28    byte      1              OS: OpenBSD,
>28    byte      2              OS: NetBSD,
>28    byte      3              OS: FreeBSD,
>28    byte      4              OS: 4.4BSD,
>28    byte      5              OS: Linux,
>28    byte      6              OS: SVR4,
>28    byte      7              OS: Esix,
>28    byte      8              OS: Solaris,
>28    byte      9              OS: Irix,
>28    byte      10             OS: SCO,
>28    byte      11             OS: Dell,
>28    byte      12             OS: NCR,
>28    byte      13             OS: LynxOS,
>28    byte      14             OS: VxWorks,
>28    byte      15             OS: pSOS,
>28    byte      16             OS: QNX,
>28    byte      17             OS: Firmware,
>28    byte      18             OS: RTEMS,
>28    byte      19             OS: ARTOS,
>28    byte      20             OS: Unity OS,
>29    byte      0              CPU: {invalid}invalid CPU,
>29    byte      1              CPU: Alpha,
>29    byte      2              CPU: ARM,
>29    byte      3              CPU: Intel x86,
>29    byte      4              CPU: IA64,
>29    byte      5              CPU: MIPS,
>29    byte      6              CPU: MIPS 64 bit,
>29    byte      7              CPU: PowerPC,
>29    byte      8              CPU: IBM S390,
>29    byte      9              CPU: SuperH,
>29    byte      10             CPU: Sparc,
>29    byte      11             CPU: Sparc 64 bit,
>29    byte      12             CPU: M68K,
>29    byte      13             CPU: Nios-32,
>29    byte      14             CPU: MicroBlaze,
>29    byte      15             CPU: Nios-II,
>29    byte      16             CPU: Blackfin,
>29    byte      17             CPU: AVR,
>29    byte      18             CPU: STMicroelectronics ST200,
>30    byte      0              image type: {invalid} Image,
>30    byte      1              image type: Standalone Program,
>30    byte      2              image type: OS Kernel Image,
>30    byte      3              image type: RAMDisk Image,
>30    byte      4              image type: Multi-File Image,
>30    byte      5              image type: Firmware Image,
>30    byte      6              image type: Script file,
>30    byte      7              image type: Filesystem Image,
>30    byte      8              image type: Binary Flat Device Tree Blob
>31    byte      0              compression type: none,
>31    byte      1              compression type: gzip,
>31    byte      2              compression type: bzip2,
>31    byte      3              compression type: lzma,
>32    string    x              image name: "%s"

# AUTEL EVO I/II
# https://github.com/anthok/autel
0 string "<filetransfer>" Autel EVO Upgrade Transfer{overlap},
>16 string "<fileinfo>"
>28 belong x filename_size: {strlen:%d}%d,
>32 belong x
>36 string x filename: {string}%s,
>(28.L+36) string "<filecontent>"
>(28.L+36+15) belong x file_size: %d,
>(28.L+36+15+4) belong x



#-------------------------Kernels-------------------------------------

# Linux kernel boot images, from Albert Cahalan <acahalan@cs.uml.edu>
# and others such as Axel Kohlmeyer <akohlmey@rincewind.chemie.uni-ulm.de>
# and Nicolas Lichtmaier <nick@debian.org>
# All known start with: b8 c0 07 8e d8 b8 00 90 8e c0 b9 00 01 29 f6 29
0       string      \xb8\xc0\x07\x8e\xd8\xb8\x00\x90\x8e\xc0\xb9\x00\x01\x29\xf6\x29    _Linux kernel boot image
>514    string      !HdrS                                                               {invalid}

# Finds and prints Linux kernel strings in raw Linux kernels (output like uname -a).
# Commonly found in decompressed embedded kernel binaries.
0       string      Linux\x20version\x20    _Linux kernel version
>14     byte        >0x33                   {invalid}
>14     byte        <0x32                   {invalid}
>14     string      x                       %.6s

# Linux ARM compressed kernel image
# Starts with 8 NOPs, with 0x016F2818 at offset 0x24
36  ulelong 0x016F2818                      _Linux kernel ARM boot executable zImage (little-endian)
>0  ulelong !0xE1A00000                     {invalid}(invalid)
>4  ulelong !0xE1A00000                     {invalid}(invalid)
>8  ulelong !0xE1A00000                     {invalid}(invalid)
>12 ulelong !0xE1A00000                     {invalid}(invalid)
>16 ulelong !0xE1A00000                     {invalid}(invalid)
>20 ulelong !0xE1A00000                     {invalid}(invalid)
>24 ulelong !0xE1A00000                     {invalid}(invalid)
>28 ulelong !0xE1A00000                     {invalid}(invalid)

36  ubelong 0x016F2818                      _Linux kernel ARM boot executable zImage (big-endian)
>0  ubelong !0xE1A00000                     {invalid}(invalid)
>4  ubelong !0xE1A00000                     {invalid}(invalid)
>8  ubelong !0xE1A00000                     {invalid}(invalid)
>12 ubelong !0xE1A00000                     {invalid}(invalid)
>16 ubelong !0xE1A00000                     {invalid}(invalid)
>20 ubelong !0xE1A00000                     {invalid}(invalid)
>24 ubelong !0xE1A00000                     {invalid}(invalid)
>28 ubelong !0xE1A00000                     {invalid}(invalid)

# Linux ARM64 kernel image
# Header defined through https://www.kernel.org/doc/Documentation/arm64/booting.txt
56  string    ARMd                          _Linux kernel ARM64 image,
# Reserved fields
>32 ulequad   !0                            {invalid}
>40 ulequad   !0                            {invalid}
>48 ulequad   !0                            {invalid}
# Information
>8  ulelong   x                             load offset: 0x%x,
>16 ulelong   x                             image size: %d bytes,
# Flags
>24 ulequad&1 0                             little endian,
>24 ulequad&1 1                             big endian,
>24 ulequad&6 2                             4k page size,
>24 ulequad&6 4                             16k page size,
>24 ulequad&6 6                             64k page size,
>24 ulequad&8 0                             place kernel close to DRAM base


#------------------------------------------------------------------------------
# $File: zyxel,v 1.6 2009/09/19 16:28:13 christos Exp $
# zyxel:  file(1) magic for ZyXEL modems
#
# From <rob@pe1chl.ampr.org>
# These are the /etc/magic entries to decode datafiles as used for the
# ZyXEL U-1496E DATA/FAX/VOICE modems.  (This header conforms to a
# ZyXEL-defined standard)

#0       string          ZyXEL\002       ZyXEL voice data
#>10     byte            0               \b, CELP encoding
#>10     byte&0x0B       1               \b, ADPCM2 encoding
#>10     byte&0x0B       2               \b, ADPCM3 encoding
#>10     byte&0x0B       3               \b, ADPCM4 encoding
#>10     byte&0x0B       8               \b, New ADPCM3 encoding
#>10     byte&0x04       4               \b,with resync

0       string          LinuxGuestRecord        _linux, Xen saved domain file

## 0       string      \x3chtml        HTML document header
## >5      byte        !0x20
## >>5     byte        !0x3e           {invalid}
## 0       string      \x3cHTML        HTML document header
## >5      byte        !0x20
## >>5     byte        !0x3e           {invalid}

## 0    string        \x3c/html\x3e        HTML document footer
## 0    string        \x3c/HTML\x3e        HTML document footer

## 0    string        \x3c?xml\x20version      XML document,
## >15  string        x                        version: "%.3s"

# CodeGate 2011 http://nopsrus.blogspot.com/2013/05/codegate-ctf-2011-binary-100-points.html
0    string    \x23\x40\x7e\x5e    Windows Script Encoded Data (screnc.exe)


#0   string      neighbor           Neighborly text,
#>0  string      x                  "%s
#>63 string      x                  \b%s"

#0   string      Neighbor           Neighborly text,
#>0  string      x                  "%s
#>63 string      x                  \b%s"

#0   string      neighborly         Neighborly text, best guess: Goodspeed,
#>0  string      x                  "%s
#>63 string      x                  \b%s"

#0   string      begin\x20           uuencoded data,
#>9  byte        !0x20               {invalid}invalid format,
#>6  byte        <0x30               {invalid}invalid permissions,
#>6  byte        >0x39               {invalid}invalid permissions,
#>7  byte        <0x30               {invalid}invalid permissions,
#>7  byte        >0x39               {invalid}invalid permissions,
#>8  byte        <0x30               {invalid}invalid permissions,
#>8  byte        >0x39               {invalid}invalid permissions,
#>10 string      x                   file name: "%s",
#>6  string      x                   file permissions: "%.3s"

0       string      \x00\x53\x46\x48                                    OSX DMG image
>0x38   string      !d\x00i\x00s\x00k\x00\x20\x00i\x00m\x00a\x00g\x00e  invalid{invalid}

# Xilinx FPGA Bitstream
# Ref: http://www.xilinx.com/support/answers/7891.html
0       ubequad        0xffffffffaa995566  Xilinx Virtex/Spartan FPGA bitstream dummy + sync word


# From: http://arm.ninja/2016/03/04/reverse-engineering-samsung-s6-modem/
0           string      TOC\x00\x00\x00\x00     Samsung modem TOC index,
>20         lelong      x                       size: 0x%X bytes,
>24         lelong      !0                      invalid TOC CRC,{invalid}
>28         lelong      !1                      invalid TOC index{invalid}
>0x20       string      x                       TOC entries: %s
>0x40       byte        !0
>>0x40      string      x                       \b, %s
>0x60       byte        !0
>>0x60      string      x                       \b, %s
>0x80       byte        !0
>>0x80      string      x                       \b, %s
>0xA0       byte        !0
>>0xA0      string      x                       \b, %s
>0xC0       byte        !0
>>0xC0      string      x                       \b, %s
>0xE0       byte        !0
>>0xE0      string      x                       \b, %s
>0x100      byte        !0
>>0x100     string      x                       \b, %s